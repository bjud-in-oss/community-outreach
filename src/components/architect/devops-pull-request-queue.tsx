'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';

/**
 * Pull request data structure
 */
export interface PullRequest {
  id: string;
  title: string;
  description: string;
  author: string;
  createdAt: Date;
  updatedAt: Date;
  status: 'open' | 'approved' | 'rejected' | 'merged';
  priority: 'low' | 'medium' | 'high' | 'critical';
  branch: string;
  targetBranch: string;
  filesChanged: number;
  linesAdded: number;
  linesRemoved: number;
  reviewers: string[];
  labels: string[];
  checks: {
    tests: 'pending' | 'passed' | 'failed';
    security: 'pending' | 'passed' | 'failed';
    performance: 'pending' | 'passed' | 'failed';
  };
  metacyclicPhase?: 'ADAPT' | 'INTEGRATE' | 'EMERGE';
}

/**
 * Props for the DevOps Pull Request Queue
 */
export interface DevOpsPullRequestQueueProps {
  /** Whether to auto-refresh the queue */
  autoRefresh?: boolean;
  
  /** Refresh interval in milliseconds */
  refreshInterval?: number;
}

/**
 * DevOps & Pull Request Queue Component
 * Lists all open PRs generated by the Metacyclic Loop with review and approval tools
 */
export function DevOpsPullRequestQueue({
  autoRefresh = true,
  refreshInterval = 30000 // 30 seconds
}: DevOpsPullRequestQueueProps) {
  const [pullRequests, setPullRequests] = useState<PullRequest[]>([]);
  const [selectedPR, setSelectedPR] = useState<PullRequest | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [filter, setFilter] = useState<'all' | 'open' | 'needs-review' | 'approved'>('open');

  // Mock pull request data
  const generateMockPRs = (): PullRequest[] => {
    const mockPRs: PullRequest[] = [
      {
        id: 'pr-001',
        title: 'Implement Enhanced Memory Consolidation Algorithm',
        description: 'This PR implements the new memory consolidation algorithm as specified in SEP-205. The changes include improved Graph RAG performance and better conflict resolution.',
        author: 'metacyclic-agent-001',
        createdAt: new Date(Date.now() - 3600000), // 1 hour ago
        updatedAt: new Date(Date.now() - 1800000), // 30 minutes ago
        status: 'open',
        priority: 'high',
        branch: 'feature/memory-consolidation-v2',
        targetBranch: 'main',
        filesChanged: 12,
        linesAdded: 456,
        linesRemoved: 123,
        reviewers: ['architect-user'],
        labels: ['enhancement', 'memory', 'performance'],
        checks: {
          tests: 'passed',
          security: 'passed',
          performance: 'pending'
        },
        metacyclicPhase: 'INTEGRATE'
      },
      {
        id: 'pr-002',
        title: 'Fix Resource Governor Circuit Breaker Logic',
        description: 'Addresses critical bug in resource governor where circuit breaker was not properly activating under high error rates. Includes comprehensive test coverage.',
        author: 'metacyclic-agent-002',
        createdAt: new Date(Date.now() - 7200000), // 2 hours ago
        updatedAt: new Date(Date.now() - 900000), // 15 minutes ago
        status: 'open',
        priority: 'critical',
        branch: 'bugfix/resource-governor-circuit-breaker',
        targetBranch: 'main',
        filesChanged: 5,
        linesAdded: 89,
        linesRemoved: 34,
        reviewers: ['architect-user'],
        labels: ['bugfix', 'resource-governor', 'critical'],
        checks: {
          tests: 'passed',
          security: 'passed',
          performance: 'passed'
        },
        metacyclicPhase: 'EMERGE'
      },
      {
        id: 'pr-003',
        title: 'Add Limbic State Monitoring Dashboard',
        description: 'New dashboard component for real-time monitoring of user and agent limbic states. Includes historical trend visualization and alert system.',
        author: 'metacyclic-agent-001',
        createdAt: new Date(Date.now() - 10800000), // 3 hours ago
        updatedAt: new Date(Date.now() - 600000), // 10 minutes ago
        status: 'approved',
        priority: 'medium',
        branch: 'feature/limbic-monitoring-dashboard',
        targetBranch: 'main',
        filesChanged: 8,
        linesAdded: 234,
        linesRemoved: 12,
        reviewers: ['architect-user'],
        labels: ['feature', 'ui', 'monitoring'],
        checks: {
          tests: 'passed',
          security: 'passed',
          performance: 'passed'
        },
        metacyclicPhase: 'EMERGE'
      },
      {
        id: 'pr-004',
        title: 'Optimize Semantic RAG Query Performance',
        description: 'Performance improvements for semantic RAG queries including better indexing and caching strategies. Reduces average query time by 40%.',
        author: 'metacyclic-agent-003',
        createdAt: new Date(Date.now() - 14400000), // 4 hours ago
        updatedAt: new Date(Date.now() - 300000), // 5 minutes ago
        status: 'open',
        priority: 'medium',
        branch: 'performance/semantic-rag-optimization',
        targetBranch: 'main',
        filesChanged: 15,
        linesAdded: 178,
        linesRemoved: 89,
        reviewers: ['architect-user'],
        labels: ['performance', 'semantic-rag', 'optimization'],
        checks: {
          tests: 'failed',
          security: 'passed',
          performance: 'passed'
        },
        metacyclicPhase: 'ADAPT'
      }
    ];

    return mockPRs;
  };

  // Fetch pull requests
  const fetchPullRequests = async () => {
    setIsLoading(true);
    
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const prs = generateMockPRs();
    setPullRequests(prs);
    setIsLoading(false);
  };

  useEffect(() => {
    fetchPullRequests();
  }, []);

  useEffect(() => {
    if (autoRefresh) {
      const interval = setInterval(fetchPullRequests, refreshInterval);
      return () => clearInterval(interval);
    }
  }, [autoRefresh, refreshInterval]);

  // Filter pull requests
  const filteredPRs = pullRequests.filter(pr => {
    switch (filter) {
      case 'open': return pr.status === 'open';
      case 'needs-review': return pr.status === 'open' && pr.checks.tests === 'passed';
      case 'approved': return pr.status === 'approved';
      default: return true;
    }
  });

  const handleApprove = async (prId: string) => {
    setPullRequests(prev => prev.map(pr => 
      pr.id === prId ? { ...pr, status: 'approved' as const } : pr
    ));
  };

  const handleReject = async (prId: string) => {
    setPullRequests(prev => prev.map(pr => 
      pr.id === prId ? { ...pr, status: 'rejected' as const } : pr
    ));
  };

  const handleMerge = async (prId: string) => {
    setPullRequests(prev => prev.map(pr => 
      pr.id === prId ? { ...pr, status: 'merged' as const } : pr
    ));
  };

  const getStatusColor = (status: PullRequest['status']): string => {
    switch (status) {
      case 'open': return 'bg-blue-100 text-blue-800';
      case 'approved': return 'bg-green-100 text-green-800';
      case 'rejected': return 'bg-red-100 text-red-800';
      case 'merged': return 'bg-purple-100 text-purple-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityColor = (priority: PullRequest['priority']): string => {
    switch (priority) {
      case 'low': return 'bg-gray-100 text-gray-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'high': return 'bg-orange-100 text-orange-800';
      case 'critical': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getCheckColor = (status: 'pending' | 'passed' | 'failed'): string => {
    switch (status) {
      case 'pending': return 'bg-yellow-100 text-yellow-800';
      case 'passed': return 'bg-green-100 text-green-800';
      case 'failed': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const formatTimeAgo = (date: Date): string => {
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const hours = Math.floor(diff / 3600000);
    const minutes = Math.floor((diff % 3600000) / 60000);
    
    if (hours > 0) return `${hours}h ago`;
    return `${minutes}m ago`;
  };

  return (
    <div className="space-y-6">
      {/* Header with filters */}
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-medium text-gray-900">
            Pull Request Queue ({filteredPRs.length})
          </h3>
          <p className="text-sm text-gray-600">
            Metacyclic Loop generated pull requests awaiting review
          </p>
        </div>
        
        <div className="flex items-center space-x-2">
          <select
            value={filter}
            onChange={(e) => setFilter(e.target.value as any)}
            className="text-sm border rounded px-3 py-1"
          >
            <option value="all">All PRs</option>
            <option value="open">Open</option>
            <option value="needs-review">Needs Review</option>
            <option value="approved">Approved</option>
          </select>
          
          <Button
            variant="outline"
            size="sm"
            onClick={fetchPullRequests}
            disabled={isLoading}
          >
            {isLoading ? 'Refreshing...' : 'Refresh'}
          </Button>
        </div>
      </div>

      {/* Statistics */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4 text-center">
            <div className="text-2xl font-bold text-blue-600">
              {pullRequests.filter(pr => pr.status === 'open').length}
            </div>
            <div className="text-sm text-gray-600">Open</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4 text-center">
            <div className="text-2xl font-bold text-green-600">
              {pullRequests.filter(pr => pr.status === 'approved').length}
            </div>
            <div className="text-sm text-gray-600">Approved</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4 text-center">
            <div className="text-2xl font-bold text-red-600">
              {pullRequests.filter(pr => pr.priority === 'critical').length}
            </div>
            <div className="text-sm text-gray-600">Critical</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4 text-center">
            <div className="text-2xl font-bold text-purple-600">
              {pullRequests.filter(pr => pr.status === 'merged').length}
            </div>
            <div className="text-sm text-gray-600">Merged</div>
          </CardContent>
        </Card>
      </div>

      {/* Pull Request List */}
      <div className="space-y-4">
        {isLoading ? (
          <Card>
            <CardContent className="p-8 text-center">
              <div className="animate-spin w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-4" />
              <p className="text-gray-600">Loading pull requests...</p>
            </CardContent>
          </Card>
        ) : filteredPRs.length === 0 ? (
          <Card>
            <CardContent className="p-8 text-center">
              <p className="text-gray-600">No pull requests match the current filter</p>
            </CardContent>
          </Card>
        ) : (
          filteredPRs.map(pr => (
            <Card key={pr.id} className="hover:shadow-md transition-shadow">
              <CardContent className="p-6">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      <h4 className="text-lg font-medium text-gray-900">
                        {pr.title}
                      </h4>
                      <Badge className={getStatusColor(pr.status)}>
                        {pr.status.toUpperCase()}
                      </Badge>
                      <Badge className={getPriorityColor(pr.priority)}>
                        {pr.priority.toUpperCase()}
                      </Badge>
                      {pr.metacyclicPhase && (
                        <Badge variant="outline">
                          {pr.metacyclicPhase}
                        </Badge>
                      )}
                    </div>
                    
                    <p className="text-sm text-gray-600 mb-3">
                      {pr.description}
                    </p>
                    
                    <div className="flex items-center space-x-4 text-sm text-gray-500 mb-3">
                      <span>By {pr.author}</span>
                      <span>{formatTimeAgo(pr.createdAt)}</span>
                      <span>{pr.branch} → {pr.targetBranch}</span>
                      <span>+{pr.linesAdded} -{pr.linesRemoved}</span>
                      <span>{pr.filesChanged} files</span>
                    </div>
                    
                    {/* Labels */}
                    <div className="flex flex-wrap gap-1 mb-3">
                      {pr.labels.map(label => (
                        <Badge key={label} variant="secondary" className="text-xs">
                          {label}
                        </Badge>
                      ))}
                    </div>
                    
                    {/* Checks */}
                    <div className="flex items-center space-x-2">
                      <span className="text-sm font-medium text-gray-700">Checks:</span>
                      <Badge className={getCheckColor(pr.checks.tests)}>
                        Tests: {pr.checks.tests}
                      </Badge>
                      <Badge className={getCheckColor(pr.checks.security)}>
                        Security: {pr.checks.security}
                      </Badge>
                      <Badge className={getCheckColor(pr.checks.performance)}>
                        Performance: {pr.checks.performance}
                      </Badge>
                    </div>
                  </div>
                  
                  {/* Actions */}
                  <div className="flex flex-col space-y-2 ml-4">
                    <Button
                      size="sm"
                      onClick={() => setSelectedPR(pr)}
                    >
                      View Details
                    </Button>
                    
                    {pr.status === 'open' && (
                      <>
                        <Button
                          size="sm"
                          variant="outline"
                          className="text-green-600 border-green-600 hover:bg-green-50"
                          onClick={() => handleApprove(pr.id)}
                          disabled={pr.checks.tests !== 'passed' || pr.checks.security !== 'passed'}
                        >
                          Approve
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          className="text-red-600 border-red-600 hover:bg-red-50"
                          onClick={() => handleReject(pr.id)}
                        >
                          Reject
                        </Button>
                      </>
                    )}
                    
                    {pr.status === 'approved' && (
                      <Button
                        size="sm"
                        className="bg-purple-600 hover:bg-purple-700"
                        onClick={() => handleMerge(pr.id)}
                      >
                        Merge
                      </Button>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          ))
        )}
      </div>

      {/* Selected PR Details Modal */}
      {selectedPR && (
        <Card className="border-2 border-blue-500">
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="text-lg">Pull Request Details</CardTitle>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setSelectedPR(null)}
              >
                Close
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 className="font-medium text-gray-900 mb-2">Basic Information</h4>
                <div className="space-y-1 text-sm">
                  <div><span className="font-medium">ID:</span> {selectedPR.id}</div>
                  <div><span className="font-medium">Author:</span> {selectedPR.author}</div>
                  <div><span className="font-medium">Created:</span> {selectedPR.createdAt.toLocaleString()}</div>
                  <div><span className="font-medium">Updated:</span> {selectedPR.updatedAt.toLocaleString()}</div>
                  <div><span className="font-medium">Status:</span> {selectedPR.status}</div>
                  <div><span className="font-medium">Priority:</span> {selectedPR.priority}</div>
                  {selectedPR.metacyclicPhase && (
                    <div><span className="font-medium">Metacyclic Phase:</span> {selectedPR.metacyclicPhase}</div>
                  )}
                </div>
              </div>
              
              <div>
                <h4 className="font-medium text-gray-900 mb-2">Changes</h4>
                <div className="space-y-1 text-sm">
                  <div><span className="font-medium">Branch:</span> {selectedPR.branch}</div>
                  <div><span className="font-medium">Target:</span> {selectedPR.targetBranch}</div>
                  <div><span className="font-medium">Files Changed:</span> {selectedPR.filesChanged}</div>
                  <div><span className="font-medium">Lines Added:</span> +{selectedPR.linesAdded}</div>
                  <div><span className="font-medium">Lines Removed:</span> -{selectedPR.linesRemoved}</div>
                  <div><span className="font-medium">Reviewers:</span> {selectedPR.reviewers.join(', ')}</div>
                </div>
              </div>
            </div>
            
            <div className="mt-6">
              <h4 className="font-medium text-gray-900 mb-2">Description</h4>
              <p className="text-sm text-gray-600 bg-gray-50 p-3 rounded">
                {selectedPR.description}
              </p>
            </div>
            
            <div className="mt-6">
              <h4 className="font-medium text-gray-900 mb-2">Check Status</h4>
              <div className="grid grid-cols-3 gap-4">
                <div className="text-center">
                  <Badge className={getCheckColor(selectedPR.checks.tests)}>
                    Tests
                  </Badge>
                  <p className="text-xs text-gray-500 mt-1">{selectedPR.checks.tests}</p>
                </div>
                <div className="text-center">
                  <Badge className={getCheckColor(selectedPR.checks.security)}>
                    Security
                  </Badge>
                  <p className="text-xs text-gray-500 mt-1">{selectedPR.checks.security}</p>
                </div>
                <div className="text-center">
                  <Badge className={getCheckColor(selectedPR.checks.performance)}>
                    Performance
                  </Badge>
                  <p className="text-xs text-gray-500 mt-1">{selectedPR.checks.performance}</p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}

export default DevOpsPullRequestQueue;