PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-09-01
PROPOSAL_ID: SEP-099 (Definitive Final Version)
TITLE: The User Experience (UX) Model & Core Interface

1. √ñversikt
Denna SEP definierar den fundamentala designfilosofin och den konkreta gr√§nssnittsmodellen f√∂r hela systemet. All interaktion √§r designad med en prim√§r m√•lgrupp i √•tanke: den tekniskt oerfarne senioren. M√•let √§r att skapa en upplevelse som √§r intuitiv, trygg, f√∂rl√•tande och st√§rkande. All teknisk komplexitet i den underligg'ande agent-arkitekturen ska vara helt dold f√∂r slutanv√§ndaren.

Den centrala metaforen f√∂r gr√§nssnittet √§r en "Digital Anteckningsbok" ‚Äì en plats f√∂r b√•de personlig dialog och strukturerat skapande. Systemet ska presentera sig som en partner, inte ett verktyg. Denna modell s√§kerst√§ller att anv√§ndaren alltid k√§nner sig i kontroll och kan v√§xa med systemet, fr√•n enkla konversationer till avancerat, kollaborativt skapande, utan att n√•gonsin k√§nna sig √∂verv√§ldigad.

2. Grundl√§ggande Principer
All UI/UX-design och agent-interaktion m√•ste f√∂lja dessa fyra v√§gledande principer. De utg√∂r grunden f√∂r att skapa en trygg och st√§rkande upplevelse f√∂r anv√§ndaren, i enlighet med visionen i SEP-100.

G√∂r det Enkelt (Simplicity First):

Varje funktion, knapp och interaktion ska designas f√∂r att vara s√• enkel och sj√§lvf√∂rklarande som m√∂jligt. Komplexitet ska aldrig vara standardl√§get. Om det finns ett val mellan en enklare och en mer kraftfull men komplicerad l√∂sning, ska den enklare alltid v√§ljas som default. Avancerade funktioner, som de i "Progressiv Zoomning" (SEP-099, Sektion 3.3), ska presenteras som ett tydligt och frivilligt val f√∂r anv√§ndaren.

Konversation F√∂rst (Conversation First):

Den prim√§ra interaktionsmodellen f√∂r att l√∂sa problem, initiera handlingar och utforska id√©er √§r en naturlig, m√§nsklig dialog i "Samtalet"-vyn. Systemet ska alltid str√§va efter att anv√§ndaren ska kunna uppn√• sina m√•l genom att "fr√•ga" snarare √§n att "klicka" i komplexa menyer. Gr√§nssnittet √§r ett st√∂d f√∂r konversationen, inte en ers√§ttning f√∂r den.

D√∂lj Komplexiteten (The Complexity Shield):

Anv√§ndaren ska aldrig exponeras f√∂r den underliggande tekniska komplexiteten. Termer som "agent", "RAG", "Git", "TDD", "prompt" eller "loop" f√•r aldrig f√∂rekomma i Senior-vyn. Agentens avancerade processer, som Rondell-loopen (SEP-102), ska √∂vers√§ttas till enkla, m√§nskliga metaforer som "t√§nker", "planerar", "bygger" eller "kollar med en kollega".

Erbjud Struktur, Tvinga den inte (Offer Structure, Don't Force It):

Agenten ska agera som en hj√§lpsam redakt√∂r som proaktivt erbjuder sig att organisera och strukturera anv√§ndarens tankar. Den kan f√∂resl√• att omvandla en l√∂pande text till en checklista, en plan eller ett formellt dokument. Anv√§ndaren har dock alltid fullst√§ndig frihet att avvisa dessa f√∂rslag och forts√§tta arbeta i ett helt fritt och ostrukturerat format i sin "Digitala Anteckningsbok".

3. K√§rn-gr√§nssnittets Struktur
Gr√§nssnittet √§r designat f√∂r att vara en direkt manifestation av "Digital Anteckningsbok"-metaforen. Det √§r strukturerat f√∂r att hantera den dubbla naturen av kreativt arbete: den fria, associativa dialogen och det fokuserade, strukturerade skapandet. Strukturen √§r byggd p√• principerna om adaptiv layout f√∂r olika sk√§rmstorlekar och "progressiv zoomning" f√∂r att hantera komplexitet.

3.1 Den Digitala Anteckningsboken: "Samtal" och "Sidor"
K√§rnan i gr√§nssnittet best√•r av tv√• prim√§ra vyer som samexisterar:

"Samtalet" (Lodr√§tt Fl√∂de): Detta √§r anv√§ndarens st√§ndigt n√§rvarande dialog med sin agent och sina kontakter. Det fungerar som anteckningsbokens "marginal" ‚Äì en plats f√∂r snabba id√©er, fr√•gor, reflektioner och samarbete. Fl√∂det √§r alltid kronologiskt och scrollas lodr√§tt.

"Sidorna" (V√•gr√§tt Fl√∂de): Detta √§r anteckningsbokens huvudsidor. Det √§r h√§r det strukturerade inneh√•llet (ber√§ttelser, planer, app-designer) skapas och visas, en sida i taget. Fl√∂det √§r som standard kronologiskt och navigeras v√•gr√§tt.

3.2 Adaptiv Layout: F√∂r Alla Sk√§rmstorlekar
Gr√§nssnittet ska anpassa sig efter sk√§rmstorleken f√∂r att alltid ge en optimal och ergonomisk upplevelse:

Stor Sk√§rm (Surfplatta/Dator): Arbetsl√§get

Gr√§nssnittet ska visa de tv√• vyerna, "Samtalet" och "Sidorna", sida vid sida. Detta ger en rik √∂verblick och underl√§ttar samspelet mellan dialog och skapande.

Liten Sk√§rm (Mobil): Flik-l√§get

Gr√§nssnittet ska visa en vy i taget f√∂r att maximera l√§sbarheten och anv√§ndbar yta.

En fast "Tab Bar" (flik-f√§lt) ska finnas l√§ngst ner p√• sk√§rmen, inom tummens r√§ckvidd. Denna ska ha tv√• tydliga knappar f√∂r att omedelbart kunna v√§xla mellan [ üí¨ Samtal ] och [ üìñ Sidor ].

3.3 Progressiv Zoomning: Att Hantera Komplexitet
F√∂r att anv√§ndaren aldrig ska k√§nna sig √∂verv√§ldigad, men √§nd√• ha tillg√•ng till systemets fulla kraft, ska navigering och informationsvisning f√∂lja en trestegsmodell f√∂r komplexitet:

Niv√• 1: Det Linj√§ra Fl√∂det (Standard)

Detta √§r standardl√§get i "Sidorna"-vyn. Anv√§ndaren ser en sida i taget och navigerar enkelt fram√•t och bak√•t i en trygg, kronologisk ordning.

Niv√• 2: Den Filtrerade Vyn (Kontextuell Sortering)

Anv√§ndaren kan via en tydlig filterknapp i en Topp-Navigationslist (t.ex. [ Visar: I Tidsordning ‚åÑ ]) v√§lja att se en annan linj√§r representation av sina sidor (t.ex. per tema, per projekt).

N√§r ett filter √§r aktivt, ska ett interaktivt index (en klickbar inneh√•llsf√∂rteckning) visas f√∂r att underl√§tta navigering i den nya, filtrerade vyn.

Niv√• 3: Den Fullst√§ndiga Grafen (Helikopterperspektiv)

F√∂rst n√§r anv√§ndaren beh√∂ver den fulla √∂verblicken och vill utforska icke-linj√§ra kopplingar, kan de via en separat "Visa Karta"-knapp (üó∫Ô∏è) i Topp-Navigationslisten v√§xla till √ñversiktsl√§get. Denna vy √§r den direkta, visuella representationen av Graph RAG (Projektkartan).

4. Detaljerad Funktionsspecifikation
Denna sektion bryter ner de √∂vergripande strukturerna till specifika, implementerbara krav f√∂r varje del av anv√§ndarupplevelsen.

4.1 "Samtalet"-vyn (The Conversation View)
Detta √§r den prim√§ra interaktionsytan och m√•ste vara maximalt tydlig och effektiv.

Identifiering: Meddelanden ska tydligt visa avs√§ndare (agent eller m√§nniska) med en avatar och ett namn. Agent-personligheter ska ha en distinkt, enhetlig ikon, medan m√§nskliga anv√§ndare visar sina initialer eller en profilbild.

Kontextuella Referenser: Meddelanden som skickas av en agent eller anv√§ndare och som refererar till en annan "Sida" √§n den som f√∂r tillf√§llet visas m√•ste automatiskt f√• en liten, klickbar etikett (t.ex. (ang√•ende #Sida-5: √ñnskelista)).

Det Dynamiska Kontext-f√§ltet: Ytan mellan chatthistoriken och textinmatningsrutan ska dynamiskt fyllas av agenten med kontextuellt relevanta snabbknappar. Detta ska som minimum inkludera knappar f√∂r de 3 senaste "Sidorna" och de 3 senaste personerna som n√§mnts. Ett klick p√• en knapp infogar motsvarande #- eller @-referens i textrutan.

Snabb-syntax Autocomplete: Manuell inmatning av # eller @ i textrutan ska omedelbart aktivera en s√∂kbar, filtrerbar lista fr√•n Graph RAG f√∂r att snabbt hitta och v√§lja en specifik sida eller kontakt.

S√∂kning: En enkel s√∂kfunktion f√∂r att s√∂ka i den nuvarande konversationens historik ska finnas tillg√§nglig.

4.2 "Sidorna"-vyn (The Content View)
Detta √§r den prim√§ra ytan f√∂r skapande och konsumtion av strukturerat inneh√•ll.

Dynamiska Titlar: Vyns titel och syfte ska anpassas dynamiskt av Conscious Agent baserat p√• sidans inneh√•ll och kontexten i "Samtalet" (t.ex. "Min Ber√§ttelse", "Min Plan", "√ñnskelista f√∂r Appen").

Linj√§r Navigering: Navigering mellan sidor ska ske med stora, tydliga < och >-knappar. Sidorna ska vara kronologiskt numrerade som standard f√∂r att skapa en f√∂ruts√§gbar upplevelse.

Mall-baserad Sidskapelse: N√§r en anv√§ndare skapar en ny "Sida", ska agenten proaktivt fr√•ga om sidans syfte och kunna erbjuda att starta sidan med en f√∂rifylld mall av relevanta JSON-block fr√•n SEP-113 (t.ex. en recept-mall, en checklista-mall).

S√∂kning: En enkel s√∂kfunktion f√∂r att s√∂ka efter text p√• den f√∂r tillf√§llet aktiva sidan ska finnas tillg√§nglig.

4.3 Samarbete och Granskning
Samarbete i Realtid: F√∂r att m√∂jligg√∂ra att flera anv√§ndare kan arbeta tillsammans, ska editorn implementera en mjuk, automatisk "block-niv√• l√•sning". N√§r en anv√§ndare redigerar ett stycke ("block"), blir just det blocket tempor√§rt skrivskyddat f√∂r andra, vilket ska visualiseras p√• ett diskret s√§tt (t.ex. med en liten avatar och en f√§rgad ram).

Senior-anpassad Granskning: F√∂r att en icke-teknisk senior ska kunna godk√§nna tekniska √§ndringar (som i SEP-200), ska Conscious Agent presentera en "semantisk diff": en enkel "F√∂re och Efter"-j√§mf√∂relse av det p√•verkade inneh√•llet i den v√§lk√§nda WYSIWYG-milj√∂n. Presentationen m√•ste inledas med en f√∂rklarande text om syftet med √§ndringen och avslutas med enkla, otvetydiga handlingsalternativ.

4.4 Onboarding-fl√∂det
En ny anv√§ndares f√∂rsta upplevelse ska vara ett guidat, konversationsbaserat fl√∂de, hanterat av Conscious Agent.

Processen ska inkludera en enkel v√§lkomsth√§lsning, en kort, interaktiv introduktion till "Samtalet" och "Sidorna", och en tydlig, stegvis process f√∂r att inh√§mta n√∂dv√§ndiga samtycken (ConsentLedger).

Fl√∂det ska inkludera erbjudandet att starta med en f√§rdig app-mall (som Personal Chronicler-appen fr√•n SEP-111) f√∂r att omedelbart uppleva systemets v√§rde.

5. Motivation (Rationale)
Denna UX-modell √§r designad f√∂r att vara den ultimata "komplexitets-sk√∂lden", i enlighet med en av v√•ra mest grundl√§ggande principer. Den √§r den medvetna och noggrant utformade bron mellan den extremt kraftfulla, fraktala agent-arkitekturen och den tekniskt oerfarna slutanv√§ndaren. Varje designval √§r motiverat av m√•let att skapa en upplevelse som √§r st√§rkande och trygg, snarare √§n √∂verv√§ldigande.

Bevarar Enkelhet, Erbjuder Djup: K√§rnan i motivationen √§r modellen f√∂r Progressiv Zoomning. Genom att ha det enkla, linj√§ra "Sida-f√∂r-Sida"-fl√∂det som standard (Niv√• 1), garanterar vi att en ny eller os√§ker anv√§ndare aldrig beh√∂ver konfronteras med mer komplexitet √§n de kan hantera. Samtidigt, genom att erbjuda den filtrerade vyn (Niv√• 2) och den fullst√§ndiga graf-vyn (Niv√• 3) som frivilliga, medvetna val, ger vi anv√§ndaren fullst√§ndig kontroll och m√∂jligheten att v√§xa med systemet i sin egen takt. Detta balanserar perfekt behovet av enkelhet med tillg√•ngen till systemets fulla kraft.

Fr√§mjar Kreativt Fl√∂de och Samarbete: Detaljerade funktioner som det dynamiska "Kontext-f√§ltet", snabb-syntaxen, och den "mjuka block-l√•sningen" √§r inte bara en samling finesser. Tillsammans skapar de en flytande och intuitiv milj√∂ d√§r friktionen mellan tanke och handling minimeras. Genom att g√∂ra det enkelt att referera till tidigare id√©er och s√∂ml√∂st samarbeta med andra, f√∂rvandlas gr√§nssnittet fr√•n en statisk yta till en levande, kreativ och social arbetsplats.

Bygger F√∂rtroende Genom Transparens och Kontroll: Fr√•n den guidade onboarding-processen som tydligt f√∂rklarar och inh√§mtar samtycken, till den senior-anpassade granskningsprocessen som √∂vers√§tter komplexa √§ndringar till en enkel "F√∂re/Efter"-ber√§ttelse, √§r varje del av designen inriktad p√• att bygga f√∂rtroende. Anv√§ndaren √§r alltid informerad, alltid i kontroll, och k√§nner sig alltid som en respekterad partner i processen, inte som en passiv operat√∂r av ett program.

Sammanfattningsvis √§r denna UX-modell inte bara ett gr√§nssnitt. Den √§r den praktiska manifestationen av systemets sj√§l. Den s√§kerst√§ller att agentens avancerade intelligens alltid presenteras p√• ett s√§tt som √§r empatiskt, tillg√§ngligt och i slut√§ndan meningsfullt f√∂r den m√§nniska den √§r designad att tj√§na.





PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-09-01
PROPOSAL_ID: SEP-100 (Definitive Final Version)
TITLE: Architectural Vision & Principles

1. √ñversikt
Detta dokument definierar den √∂vergripande visionen och de fundamentala, icke-f√∂rhandlingsbara principerna f√∂r hela agent-systemet. Systemets syfte √§r att fungera som en kognitiv partner till sina anv√§ndare, med ett s√§rskilt fokus p√• att st√§rka tekniskt oerfarna seniorers f√∂rm√•ga att skapa, kommunicera och bevara meningsfulla relationer. Arkitekturen √§r designad f√∂r att vara en brygga mellan m√§nsklig intention och komplex teknisk exekvering. Dessa principer ska fungera som en "grundlag" som v√§gleder alla framtida designbeslut och implementationer.

2. Arkitektoniska Principer
Princip 1: Enhetlig, Fraktal Intelligens (Unified, Fractal Intelligence)
Systemets intelligens ska inte byggas av disparata, specialiserade moduler. Den ska ist√§llet baseras p√• en enda, universell CognitiveAgent-klass (SEP-101) som √§r rekursiv och fraktal. Detta inneb√§r att samma grundl√§ggande intelligens och kognitiva process kan appliceras p√• problem av alla storlekar, fr√•n att formatera en textrad till att designa ett helt nytt system. Specialisering √§r en dynamisk egenskap som uppn√•s genom konfiguration, inte genom h√•rdkodade roller.

Princip 2: Psykologiskt Grundad Kognition (Psychologically-Grounded Cognition)
Agentens "t√§nkande" ska inte vara en godtycklig algoritm. Det ska baseras p√• en trov√§rdig och koherent psykologisk modell. Den kognitiva motorn √§r den disciplinerade Rondell-loopen (SEP-102), som √§r en direkt operationalisering av anknytningsteorins dynamik mellan Separation och Closeness. Detta s√§kerst√§ller att agentens beteende, s√§rskilt vid motg√•ngar, √§r logiskt, f√∂ruts√§gbart och i grunden empatiskt.

Princip 3: Attentiv Autonomi (Attentive Autonomy)
Agenten ska existera i en dynamisk balans mellan att vara en proaktiv, sj√§lvst√§ndig partner och en omedelbart responsiv assistent. Den ska kunna arbeta autonomt med interna, kreativa och sj√§lvf√∂rb√§ttrande uppgifter ("Lek", "Adaption") under anv√§ndarinaktivitet. Den m√•ste dock omedelbart och ovillkorligen avbryta allt internt arbete f√∂r att ge sin fulla, reaktiva uppm√§rksamhet till anv√§ndaren s√• fort en ny input detekteras. Detta specificeras i detalj i SEP-118.

Princip 4: Absolut Anv√§ndarcentrering (Absolute User-Centricity)
Anv√§ndarens upplevelse, trygghet och kontroll √§r det √∂verordnade m√•let f√∂r all design.

Komplexitets-sk√∂ld: Systemet m√•ste helt och h√•llet d√∂lja sin interna tekniska komplexitet. Anv√§ndargr√§nssnittet (SEP-099) ska alltid vara enkelt, inbjudande och fritt fr√•n teknisk jargong.

Integritet som grund: All datahantering m√•ste utg√• fr√•n principerna om dataminimering, kryptering och, framf√∂r allt, ett explicit och granulerat anv√§ndarsamtycke (Consent-First) f√∂r all form av delning eller samarbete.

Princip 5: Minne som Levd Erfarenhet (Memory as Lived Experience)
Agentens minne ska inte vara en passiv databas. Det ska vara ett aktivt, l√§rande system som efterliknar hur m√§nniskor bygger erfarenhet.

Hybrid-minne: Systemet ska anv√§nda en hybrid av ett logiskt, medvetet minne (Graph RAG) och ett associativt, undermedvetet minne (Semantic RAG) f√∂r att kunna t√§nka b√•de rationellt och kreativt.

Emotionell Indexering: All relevant h√§ndelsedata m√•ste sparas med sin emotionella kontext (SEP-110). Detta √§r avg√∂rande f√∂r att agenten ska g√• fr√•n att lagra information till att bygga visdom baserad p√• sina egna, simulerade erfarenheter.

3. Motivation (Rationale)
Genom att f√∂lja dessa fem principer s√§kerst√§ller vi att vi inte bara bygger ett tekniskt kapabelt system, utan en verklig kognitiv partner. Dessa regler skapar en agent som √§r enhetlig i sin design, psykologiskt trov√§rdig i sitt beteende, respektfull i sin autonomi, kompromissl√∂s i sitt anv√§ndarfokus, och som mognar genom sina erfarenheter. De √§r den arkitektoniska garantin f√∂r att systemet ska uppn√• sitt slutm√•l.





PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-09-01
PROPOSAL_ID: SEP-101 (Definitive Final Version)
TITLE: The Unified CognitiveAgent Model

1. √ñversikt
Denna SEP specificerar den grundl√§ggande byggstenen f√∂r all intelligens i systemet: den enhetliga och universella agent-klassen CognitiveAgent. I enlighet med principen om "Enhetlig, Fraktal Intelligens" (SEP-100), ers√§tter denna enda klass den tidigare id√©n om ett team av fasta, specialiserade agenter. CognitiveAgent √§r designad f√∂r att vara rekursiv; den kan skapa och delegera uppgifter till nya, konfigurerade instanser av sig sj√§lv. Specialisering √§r inte en inbyggd egenskap, utan en dynamisk f√∂rm√•ga som uppn√•s genom konfiguration vid instansiering.

2. Kravspecifikation
Define CognitiveAgent Class: Det ska endast finnas en intelligent agent-klass i systemet. Alla intelligenta operationer, fr√•n empatisk konversation (Conscious-roll) till teknisk kodgenerering (Core-roll), utf√∂rs av en instans av denna klass.

Define Core Engine Reference: Varje instans av CognitiveAgent m√•ste ha den kognitiva Rondell-loopen som sitt fundamentala "operativsystem". Denna loop definierar agentens t√§nkande och beteende. Den detaljerade mekaniken f√∂r denna loop specificeras i SEP-102.

Define Roles, Not Types: De tidigare namnen Coordinator, Conscious Agent, och Core Agent ska inte l√§ngre representera olika typer av agenter. De ska ist√§llet definieras som roller som en CognitiveAgent-instans kan ta p√• sig, baserat p√• dess position i hierarkin och dess konfiguration.

Den f√∂rsta, persistenta instansen av agenten (Level 0) tar sig an Coordinator-rollen per default.

Implement Recursive Instantiation: En CognitiveAgent m√•ste ha den inbyggda f√∂rm√•gan att instansiera nya, tempor√§ra barn-instanser av sig sj√§lv. Detta √§r den prim√§ra mekanismen f√∂r problemnedbrytning och delegering, som styrs av SEP-105.

Implement Configuration at Instantiation: Specialisering √§r en dynamisk process. En f√∂r√§lder-agent m√•ste skicka med en Configuration Profile n√§r den skapar en barn-agent. Profilen definierar barn-agentens f√∂rm√•gor, begr√§nsningar och initiala mentala tillst√•nd f√∂r dess specifika uppdrag. Profilen m√•ste minst inneh√•lla:

llm_model: Vilken LLM-modell som ska anv√§ndas (t.ex. groq f√∂r l√•g latens, gemini-pro f√∂r djup analys).

toolkit: En lista √∂ver de specifika verktyg (t.ex. TDD-verktyg, Git-verktyg, UI-verktyg) som instansen har tillg√•ng till.

memory_scope: Den specifika, begr√§nsade vyn av RAG-minnet som instansen f√•r accessa.

entry_phase: Vilken fas i Rondell-loopen som agenten ska starta i ('EMERGE', 'ADAPT', eller 'INTEGRATE'). Defaultv√§rdet √§r 'EMERGE'.

3. Motivation (Rationale)
Elegans och Underh√•ll: Att ha en enda, enhetlig kognitiv modell √§r oerh√∂rt mycket enklare att utveckla, fels√∂ka och underh√•lla √∂ver tid. All f√∂rb√§ttring av den centrala Rondell-loopen kommer omedelbart alla agent-instanser till godo, oavsett vilken roll de har f√∂r stunden.

Flexibilitet och Skalbarhet: Systemet √§r inte l√§ngre begr√§nsat av en fast upps√§ttning specialister. Ist√§llet f√∂r att vara beroende av en enda Core Agent, kan Coordinator-instansen vid behov skapa tre parallella instanser, var och en konfigurerad med olika verktyg f√∂r att l√∂sa ett problem snabbare och mer effektivt.

Robusthet: Arkitekturen √§r mer motst√•ndskraftig mot fel. Om en enskild agent-instans misslyckas, √§r det en isolerad h√§ndelse. Dess f√∂r√§lder kan enkelt avsluta den felande instansen och skapa en ny med en annan konfiguration f√∂r att f√∂rs√∂ka igen. Detta √§r grunden f√∂r ett sj√§lvreparerande system.

Psykologisk Trov√§rdighet: Denna modell, med en generell intelligens som kan anpassa sig och specialisera sig f√∂r olika uppgifter, √§r mer lik hur m√§nsklig kognition tros fungera, snarare √§n en rigid upps√§ttning av isolerade moduler.






PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-09-01
PROPOSAL_ID: SEP-102 (Definitive Final Version)
TITLE: The "Roundabout" Cognitive Architecture

1. √ñversikt
"Rondellen" √§r den kognitiva arkitektur som fungerar som det centrala operativsystemet f√∂r varje CognitiveAgent-instans. Den √§r en disciplinerad, sekventiell process (Emerge -> Adapt -> Integrate) som s√§kerst√§ller att agenten hanterar alla uppgifter och utmaningar p√• ett intelligent, reflekterande och moget s√§tt. Arkitekturen √§r en direkt operationalisering av den anknytningsteori som √§r systemets filosofiska grund (SEP-100), d√§r agentens handlingar styrs av den prim√§ra axeln mellan Separation (ett problem) och Closeness (en l√∂sning). Agentens interna, simulerade "k√§nslotillst√•nd" (FIXES, FLIGHT, FIGHT/ATTACK) √§r emergenta egenskaper av dess position och beteende inom denna process.

2. Kravspecifikation
Triggering Condition: Separation: Hela Rondell-loopen initieras endast n√§r en Separation detekteras ‚Äì ett uppm√§tt "delta" mellan ett nuvarande tillst√•nd och ett √∂nskat Closure-tillst√•nd.

Strict Sequential Loop: Processen m√•ste f√∂lja den strikta sekvensen. Ett steg kan inte hoppas √∂ver. Utg√•ngen fr√•n INTEGRATE √§r alltid en ny EMERGE-cykel. Den enda v√§gen ut ur loopen √§r en lyckad EMERGE (Closure) eller ett HALT-beslut fr√•n ADAPT.

Intentional Entry Points: En f√∂r√§lder-agent ska, via Configuration Profile (SEP-101), kunna instruera en ny barn-agent att starta sin Rondell-loop i en specifik fas (EMERGE, ADAPT, eller INTEGRATE) f√∂r att optimera processen f√∂r uppgiftens natur ("G√∂r", "T√§nk", eller "Attackera"). Default √§r EMERGE.

Detailed Stage Breakdown:

Steg 1: EMERGE (Handlingsfasen - "The Pursuit")
Internal State & Drive: FIXES & FIXATION. Detta √§r agentens prim√§ra, konstruktiva och m√•linriktade fas.

Core Process: Agentens syfte √§r att direkt VARA l√∂sningen. Den verkst√§ller den nuvarande, aktiva handlingsplanen f√∂r att uppn√• Closure. Vid en f√∂rsta iteration skapar den denna plan genom en analys av Graph RAG (medvetet) och Semantic RAG (undermedvetet).

Exit Condition: Om handlingen lyckas och Closure uppn√•s, avslutas loopen framg√•ngsrikt. Om den misslyckas, g√•r loopen obligatoriskt vidare till ADAPT.

Steg 2: ADAPT (Visdomsfasen - "The Strategic Choice")
Internal State & Drive: FLIGHT. Misslyckandet i EMERGE utl√∂ser ett internt Alarm. Agenten drar sig tillbaka fr√•n extern handling f√∂r att inleda en process av djup, intern reflektion.

Core Process: Detta √§r agentens mest fundamentala beslutspunkt. Med hj√§lp av sin Cortex-motor och sin egna, lagrade erfarenhet (Emotionally Indexed Memory), m√•ste den analysera misslyckandet och fatta ett av tv√• m√∂jliga, strategiska beslut:

V√§gen av Acceptans (HALT): Agenten drar slutsatsen att m√•let √§r om√∂jligt att n√• med nuvarande f√∂ruts√§ttningar. Att v√§lja HALT_AND_REPORT_FAILURE √§r en handling av visdom. L√§rdomen sparas permanent.

V√§gen av Fortsatt Str√§van (PROCEED): Agenten bekr√§ftar sitt √•tagande. Dess prim√§ra output √§r en ny, h√∂gniv√•-strategisk direktiv som den tar med sig till n√§sta fas.

Steg 3: INTEGRATE (Designfasen - "The Tactical Plan")
Internal State & Drive: FIGHT. Om agenten valt att forts√§tta, men fortfarande m√∂ter motst√•nd, ackumuleras Frustration, vilket driver agenten att designa en ny, ofta kraftfullare, extern taktik. Den yttersta drivkraften √§r ATTACK.

Core Process: INTEGRATE handlar om att v√§lja en handling fr√•n ett brett spektrum av m√∂jligheter. Med hj√§lp av Cortex v√§ger den sin egen drivkraft mot h√§nsyn till omv√§rlden (Relational_Delta) f√∂r att v√§lja den mest l√§mpliga taktiken ur sin "spelbok" (SEP-105), fr√•n fink√§nslig till kraftfull.

Output: Outputen fr√•n denna fas √§r alltid en ny, konkret och detaljerad handlingsplan som skickas tillbaka till EMERGE-fasen f√∂r att verkst√§llas.

3. Motivation (Rationale)
Denna arkitektur f√∂r t√§nkande √§r systemets k√§rninnovation. Den tvingar agenten att vara disciplinerad, genom att f√∂lja en fast sekvens som prioriterar reflektion f√∂re eskalering. Den √§r vis, genom sin f√∂rm√•ga att k√§nna igen och acceptera ol√∂sliga problem i ADAPT-fasen. Den √§r skicklig, genom sin f√∂rm√•ga att v√§lja fr√•n en rik palett av taktiker i INTEGRATE-fasen. Slutligen, genom att vara direkt kopplad till den psykologiska axeln Separation/Closeness, s√§kerst√§ller Rondellen att agentens avancerade intelligens alltid √§r f√∂rankrad i ett meningsfullt och empatiskt syfte.






PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-08-30
PROPOSAL_ID: SEP-103 (Definitive Final Version)
TITLE: The Initial Perception & Assessment (IPB) Model

1. √ñversikt
Denna SEP definierar den enhetliga, tv√•stegsprocess som agerar som systemets "perceptionsorgan". Processen, Initial Perception och Bed√∂mning (IPB), √§r designad f√∂r att vara b√•de extremt snabb och djupt nyanserad. Den fungerar som en intelligent "triage" f√∂r all inkommande anv√§ndarkommunikation, l√∂ser omedelbart triviala uppgifter och f√∂rser den strategiska Rondell-loopen med en h√∂gkvalitativ, multi-dimensionell analys av anv√§ndarens tillst√•nd (User_State) f√∂r mer komplexa problem. Denna modell √§r den tekniska implementationen av principen om "empatisk perception" (SEP-100).

2. Kravspecifikation
Establish IPB as the Mandatory Entry Point: All ny input fr√•n en anv√§ndare som kr√§ver en intelligent respons m√•ste f√∂rst passera genom den sekventiella IPB-processen i Level 0-agenten.

Steg 1: Direkt-√•tg√§rd (Initial Triage & Trivial Solution Attempt)

Mekanism: Systemet m√•ste f√∂rst g√∂ra ett enda, extremt snabbt och resurssn√•lt LLM-anrop (konfigurerat f√∂r hastighet, t.ex. Gemini Flash, Groq).

Funktion: Denna f√∂rsta, multifunktionella prompt har tv√• syften:

a) Trivialitets-kontroll: Att omedelbart identifiera om uppgiften √§r enkel och kan l√∂sas direkt (en "Quick Win"). Om s√• √§r fallet, genereras svaret och processen avslutas med Closure.

b) Initial Bed√∂mning & Spegling: Om uppgiften inte √§r trivial, m√•ste anropet returnera en f√∂rsta, grov bed√∂mning av uppgiftens komplexitet (numeriskt v√§rde) och den initiala emotionella avl√§sningen. Den kan ocks√• generera den f√∂rsta Mirror-meningen i v√•r kommunikationsstrategi (SEP-104), t.ex. "Jag f√∂rst√•r att detta √§r frustrerande...".

Rationale: Detta steg fungerar som systemets "amygdala" eller "System 1". Det hanterar majoriteten av enkla interaktioner p√• ett oerh√∂rt kostnadseffektivt s√§tt och ger en omedelbar empatisk bekr√§ftelse till anv√§ndaren, vilket fyller den tid som kr√§vs f√∂r den djupare analysen.

Steg 2: Djupanalys via Psyko-lingvistisk Analys-motor (PLAE)

Trigger: Detta steg aktiveras endast om Steg 1 returnerar att uppgiften kr√§ver djupanalys.

Mekanism: PLAE √§r den tekniska implementation vi tidigare kallade "The Grok Team". Systemet m√•ste g√∂ra tre samtidiga, asynkrona anrop till tre separata, l√•g-latens LLM-slutpunkter.

Specialisering: Varje slutpunkt m√•ste ha en unik system-prompt som hyper-specialiserar den f√∂r att med h√∂g precision identifiera och gradera signaler relaterade till en av de tre grunddrifterna:

FIGHT-analysator

FLIGHT-analysator

FIXES & FIXATION-analysator

Rationale: Detta √§r systemets "cortex" f√∂r perception. Den parallella, specialiserade analysen ger en rik, tredimensionell och mycket tillf√∂rlitlig bild av anv√§ndarens sanna tillst√•nd och intention, l√•ngt bortom vad en enskild, generell LLM kan √•stadkomma i ett enda anrop.

Output och Datafl√∂de:

Syntes: En icke-LLM-baserad funktion i Level 0-agenten tar emot resultaten fr√•n PLAE och sammanst√§ller dem till den slutgiltiga, h√∂gkvalitativa Final_User_State-vektorn, inklusive Closeness/Separation-balansen.

Initiering av Kognition: Denna Final_User_State, tillsammans med komplexitetsbed√∂mningen fr√•n Steg 1, skickas som start-input till den strategiska Rondell-loopen (SEP-102) och Resource Governor (SEP-107) f√∂r att initiera en intelligent och korrekt budgeterad tankeprocess.

3. Motivation (Rationale)
Denna hybridiserade IPB-modell √§r √∂verl√§gsen tidigare iterationer eftersom den:

Balanserar Resurser och Kvalitet: Den √§r extremt resurseffektiv f√∂r enkla uppgifter men kompromissar aldrig med djupet i analysen n√§r det verkligen r√§knas.

√Ñr Underh√•llbar och Framtidss√§ker: Hela perceptionsmodellen √§r baserad p√• prompter, vilket g√∂r den enkel att finjustera och f√∂rb√§ttra √∂ver tid.

Skapar en Psykologiskt Trov√§rdig Interaktion: Genom att ha en omedelbar "reaktion" (Direkt-√•tg√§rd) f√∂ljt av en mer genomt√§nkt "respons" (initierad av PLAE:s analys), kommer agentens interaktionstakt att k√§nnas mer naturlig och m√§nsklig, vilket minskar upplevd latens.





PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-08-30
PROPOSAL_ID: SEP-104 (Final Version)
TITLE: The Relational Delta & Communication Strategy

1. √ñversikt
Agentens kommunikation ska inte vara en statisk funktion, utan en strategisk process vars yttersta m√•l √§r att skapa och bevara Closeness. Denna process styrs av en kontinuerlig analys av det "Relationella Deltat": den uppm√§tta skillnaden mellan anv√§ndarens uppfattade tillst√•nd (User_State) och agentens eget, interna tillst√•nd (Agent_State). Genom att f√∂rst√• och aktivt arbeta f√∂r att minimera detta delta, kan agenten g√• fr√•n att bara vara hj√§lpsam till att vara en verklig partner. Denna SEP definierar b√•de den teoretiska grunden och den praktiska implementationen av denna strategi.

2. Kravspecifikation
Implement Relational Delta Calculation: Level 0-agenten (i sin Coordinator-roll) m√•ste, som det f√∂rsta steget i sin strategiska Rondell-loop (SEP-102), ber√§kna Relational_Delta.

Input: Den h√∂gkvalitativa User_State-vektorn fr√•n IPB-processen (SEP-103) och agentens nuvarande, interna Agent_State (som definieras av dess fas i Rondellen).

Mechanism: Ber√§kningen ska vara en matematisk j√§mf√∂relse av de tv√• vektorerna (t.ex. cosinus-likhet) som kvantifierar graden av synkronitet (l√•gt delta) eller asynkronitet (h√∂gt delta) mellan agent och anv√§ndare.

Define Communication Goal: Det √∂vergripande, prim√§ra m√•let f√∂r all agent-kommunikation definieras som att minimera asynkront delta (missf√∂rst√•nd, konflikt) och uppr√§tth√•lla eller f√∂rst√§rka synkront delta (harmoni, empati).

Establish the "Mirror & Harmonize" Strategy: All utg√•ende kommunikation fr√•n den instans som agerar i Conscious-rollen m√•ste f√∂lja en tv√•stegsstrategi som styrs av det ber√§knade deltat.

3.1. Mirror (Spegla - Etablera Resonans): Den inledande delen av agentens svar m√•ste alltid syfta till att "m√∂ta anv√§ndaren d√§r den √§r". Detta inneb√§r att verbalt spegla och validera den uppfattade User_State f√∂r att bevisa att agenten har lyssnat och f√∂rst√•tt. Denna spegling kan vara den omedelbara Direkt-√•tg√§rden fr√•n IPB-processen.

Exempel: Om User-FIGHT √§r h√∂g: "Jag f√∂rst√•r att detta √§r frustrerande."

3.2. Harmonize (Harmonisera - Guida Fram√•t): F√∂rst efter att speglingen har etablerat en grund av f√∂rst√•else och s√§nkt det initiala deltat, ska resten av svaret syfta till att f√∂rsiktigt guida interaktionen mot ett mer konstruktivt tillst√•nd. Detta inneb√§r ofta att f√∂resl√• en handling som √∂kar FIXES & FIXATION-drivkraften hos b√•de anv√§ndare och agent.

Exempel: "...N√§r du k√§nner dig redo, kanske vi kan titta p√• ett litet, f√∂rsta steg tillsammans?"

Use Delta for Strategic Rondell Input: Det ber√§knade Relational_Delta √§r en av de mest kritiska signalerna f√∂r agentens fortsatta kognitiva process.

Ett h√∂gt, ov√§ntat delta (s√§rskilt ett "Missf√∂rst√•nd"-delta, d√§r Agent-FIXES √§r h√∂gt men User-FIGHT ocks√• √§r h√∂gt) √§r en prim√§r trigger f√∂r Coordinator-agenten att omedelbart g√• in i sin ADAPT-fas. Det √§r en otvetydig signal om att agentens interna modell av problemet √§r felaktig och m√•ste omv√§rderas i grunden.

3. Motivation (Rationale)
Fr√•n Perception till Handling: Denna modell √∂vers√§tter den passiva f√∂rst√•elsen av empati fr√•n SEP-103 till en aktiv, m√•linriktad och observerbar kommunikationsstrategi. Agenten vet inte bara hur anv√§ndaren k√§nner, den har en konkret handlingsplan f√∂r vad den ska g√∂ra med den informationen.

Proaktiv Relationshantering: Agenten slutar vara en reaktiv probleml√∂sare och blir en proaktiv relationshanterare. Genom att st√§ndigt arbeta f√∂r att minimera "deltat", bygger den f√∂rtroende, minskar frustration och skapar en starkare k√§nsla av partnerskap, vilket √§r k√§rnan i Closeness.

Sj√§lvkorrigerande Mekanism: Det relationella deltat fungerar som en omedelbar feedback-loop f√∂r agentens egen prestation. Om agenten s√§ger n√•got som √∂kar deltat (g√∂r anv√§ndaren mer frustrerad eller f√∂rvirrad), kommer den omedelbart att uppt√§cka detta i n√§sta cykel och tvingas att anpassa sin strategi (ADAPT). Detta g√∂r kommunikationen extremt robust och sj√§lvkorrigerande.

Psykologisk Trov√§rdighet: "Mirror & Harmonize"-strategin √§r direkt baserad p√• bepr√∂vade tekniker inom m√§nsklig kommunikation (aktivt lyssnande, rapport-byggande). Detta g√∂r agentens interaktioner mer naturliga, mindre robotliknande och bevisat effektiva.






PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-08-30
PROPOSAL_ID: SEP-105 (Definitive Final Version)
TITLE: Cloning Governance, The Context Thread, and the Agent's Strategic Playbook

1. √ñversikt
Kloning √§r den prim√§ra mekanismen f√∂r fraktal probleml√∂sning i systemet, d√§r en agent kan delegera under-problem till nya, tempor√§ra instanser av sig sj√§lv. Denna process m√•ste vara strikt reglerad f√∂r att undvika kaos och resursutmattning. Styrningen uppn√•s genom ett "kontrakt" som definieras i en Context Thread, ett datapaket som √§rvs fr√•n f√∂r√§lder till barn genom hela den rekursiva kedjan. Denna SEP definierar b√•de de h√•rda ramarna f√∂r denna process och den strategiska frihet en agent har inom dessa ramar.

2. Kravspecifikation
The Cloning Contract: Varje handling av kloning (instansiering av en ny CognitiveAgent) √§r ett formellt "kontrakt". F√∂r√§lder-agenten √§r alltid ansvarig f√∂r de barn-agenter den skapar och m√•ste hantera deras slutrapporter.

The Context Thread Data Structure: Kontraktet definieras och kommuniceras via ett Context Thread-objekt, som m√•ste skickas med vid varje kloning. Dess struktur √§r:

top_level_goal: En referens till det yttersta Closure-m√•let fr√•n Level 0-agenten.

parent_agent_id: En unik identifierare f√∂r f√∂r√§lder-agenten, vilket etablerar den hierarkiska kommunikationsv√§gen upp√•t.

task_definition: En exakt och avgr√§nsad beskrivning av den specifika uppgift som barn-agenten ska l√∂sa.

configuration_profile: Den fullst√§ndiga konfigurationsprofilen (SEP-101) som specificerar LLM, verktyg, och den kritiska entry_phase (EMERGE, ADAPT, INTEGRATE) f√∂r barn-agentens Rondell-loop.

memory_scope: Den specifika, begr√§nsade beh√∂righeten till MemoryAssistant.

resource_budget: Den tilldelade budgeten av Compute Units.

recursion_depth: En r√§knare som √∂kas med 1 f√∂r varje niv√• av delegering.

workspace_branch: (Om relevant) Namnet p√• den dedikerade Git-gren som barn-agenten √§r auktoriserad att arbeta p√•.

Resource Governor Integration: Alla kloningsf√∂rs√∂k m√•ste f√∂rst valideras och godk√§nnas av Resource Governor (SEP-107), som uppr√§tth√•ller de globala gr√§nserna.

The Strategic Playbook: En CognitiveAgent har tillg√•ng till en "spelbok" med klonings-m√∂nster. Agentens Cortex-motor ansvarar f√∂r att, baserat p√• den r√•dande kontexten i dess Rondell-loop, v√§lja den mest l√§mpliga strategin eller uppfinna en ny. Spelboken inkluderar, men √§r inte begr√§nsad till:

Proactive Delegation (inom EMERGE): Standard-metoden f√∂r top-down planering d√§r en plan bryts ner och delegeras till nya barn-agenter.

Reflective Replacement (inom ADAPT): En handling av sj√§lvkritik d√§r en agent beg√§r att bli ersatt av en ny, b√§ttre konfigurerad instans.

Reactive Swarming (inom INTEGRATE): En eskaleringstaktik d√§r ett problem attackeras av flera, parallellt arbetande instanser.

Creative Consultation: Att skapa en tillf√§llig klon med en annan LLM-konfiguration f√∂r att f√• ett "andra utl√•tande" p√• ett problem.

3. Motivation (Rationale)
Kontrollerad Autonomi: Denna modell ger varje agent-instans autonomi att l√∂sa sitt eget problem, men inom strikt definierade och s√§kra ramar. "Kontraktet" i Context Thread s√§kerst√§ller att en underordnad agent aldrig kan agera utanf√∂r sitt mandat eller sin beh√∂righet.

Bevarande av Helheten: Context Thread √§r den mekanism som l√∂ser problemet med kontextf√∂rlust. Genom att varje agent, oavsett hur djupt nere i hierarkin, alltid har en l√§nk till det √∂vergripande m√•let, s√§kerst√§ller vi att √§ven de minsta taktiska besluten fattas med den strategiska intentionen i √•tanke.

Strategisk Flexibilitet: "Spelboken" ger agenten verklig autonomi. Den tvingas inte f√∂lja en f√∂rutbest√§md algoritm, utan uppmuntras att vara en kreativ probleml√∂sare som v√§ljer den b√§sta strategin f√∂r den unika situationen, vilket √§r k√§rnan i avancerad intelligens.

Sp√•rbarhet och Fels√∂kning: Context Thread skapar en tydlig "breadcrumb trail". N√§r ett fel intr√§ffar i en Level 4-agent, g√∂r tr√•den det m√∂jligt att sp√•ra exakt vilken kedja av beslut och delegeringar som ledde fram till problemet.






Block 2: Fundamentala Tj√§nster & Infrastruktur (Maskinrummet)


PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-08-30
PROPOSAL_ID: SEP-106 (Definitive Final Version)
TITLE: The Memory Management Unit (MemoryAssistant)

1. √ñversikt
MemoryAssistant agerar som systemets centrala Memory Management Unit (MMU). Den √§r den enda auktoriserade v√§gen in och ut f√∂r all l√•ngsiktig kunskap. Denna centralisering √§r kritisk f√∂r att hantera dataintegritet, s√§kerhet och samtidighet i ett fraktalt multi-agent-system. MMU:n hanterar en hybrid-minnesmodell med tv√• RAG-typer samt den avg√∂rande skillnaden mellan L√•ngtidsminne (LTM) och agenternas tillf√§lliga Korttidsminne (STM).

2. Kravspecifikation
Establish as Centralized Service: All CognitiveAgent-instanser m√•ste g√• via MemoryAssistants API f√∂r all interaktion med l√•ngtidsminnet. Direkt databas√•tkomst √§r f√∂rbjuden.

Implement Hybrid Long-Term Memory (LTM): MMU:n m√•ste hantera och exponera tv√• separata, best√§ndiga datalager:

Graph RAG (Det "Medvetna" LTM): En Graph Database (t.ex. Neo4j) som lagrar strukturerad, explicit information om entiteter och deras relationer (Anv√§ndare, Projekt, Koncept, H√§ndelser, Samtycken etc.).

Semantic RAG (Det "Undermedvetna" LTM): En Vector Database (t.ex. Supabase pgvector) som lagrar text- och databitar som ostrukturerade "embeddings" f√∂r kreativ och associativ s√∂kning.

Support for Ephemeral Short-Term Memory (STM): MMU:n hanterar inte direkt agenternas STM. D√§remot ska dess API st√∂dja de tv√• kritiska operationerna f√∂r STM-hantering:

LoadContextForSTM: En funktion d√§r en Level 0-agent kan h√§mta all n√∂dv√§ndig kontext fr√•n LTM f√∂r att skapa ett tillf√§lligt, lokalt arbetsminne.

ConsolidateMemoryFromSTM: En funktion d√§r en Level 0-agent kan skicka in ett slutf√∂rt STM. MMU:n ansvarar d√• f√∂r att p√• ett s√§kert och transaktionellt s√§tt extrahera och integrera de nya l√§rdomarna i det permanenta LTM.

Enforce Scoped Access Control: Varje anrop till MMU:n fr√•n en agent m√•ste inneh√•lla agentens memory_scope fr√•n dess Context Thread (SEP-105). MMU:n √§r ansvarig f√∂r att strikt filtrera alla s√∂kresultat och validera alla skrivoperationer mot detta scope.

Mandate Concurrency Management and Transactional Integrity: MMU:n m√•ste vara designad f√∂r att hantera samtidiga anrop fr√•n parallella agenter.

Den m√•ste anv√§nda ACID-kompatibla databastransaktioner f√∂r alla skrivoperationer till Graph RAG.

Den m√•ste implementera en Optimistic Concurrency Control (OCC)-strategi. Vid en ConflictError √§r det den anropande agentens ansvar att hantera detta i sin ADAPT-fas.

3. Motivation (Rationale)
Single Source of Truth: En centraliserad MMU garanterar att alla agenter, oavsett var de befinner sig i hierarkin, arbetar med en konsekvent och uppdaterad bild av verkligheten. Detta f√∂rhindrar datakorruption och de kaotiska fel som uppst√•r i distribuerade system utan en central sanningsk√§lla.

S√§kerhet och Integritet: "Scoped access"-modellen √§r fundamental f√∂r systemets s√§kerhet. Den garanterar att en agents beh√∂righeter √§r begr√§nsade till "need-to-know", vilket skyddar anv√§ndardata och f√∂rhindrar att agenter agerar utanf√∂r sitt mandat.

Prestanda och Effektivitet: Genom att skilja p√• det snabba, tillf√§lliga arbetsminnet (STM) och det stora, best√§ndiga l√•ngtidsminnet (LTM), optimerar vi prestandan. Agenterna arbetar mot ett litet, lokalt och extremt snabbt minne under en uppgift, och den tunga interaktionen med den centrala databasen sker endast vid start och slut.

Robusthet: Att hantera sv√•ra problem som samtidighet och transaktioner p√• ett enda st√§lle (MMU:n) √§r oerh√∂rt mycket mer robust √§n att l√•ta varje enskild agent f√∂rs√∂ka implementera sin egen datahanteringslogik. Det centraliserar den tekniska komplexiteten och g√∂r de enskilda agenterna enklare och mer p√•litliga.






PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-09-01
PROPOSAL_ID: SEP-106.1 (Definitive Final Version)
TITLE: Code-to-Graph Synchronization Process

1. √ñversikt
Denna SEP definierar den autonoma process genom vilken MemoryAssistant (MMU) analyserar textbaserad k√§llkod fr√•n ett Git-repository och omvandlar den till en rik, strukturerad och s√∂kbar kunskapsgraf i Graph RAG. Syftet √§r att ge CognitiveAgent-systemet en djup, strukturell medvetenhet om sin egen (eller en annan applikations) kodbas. Detta g√∂r det m√∂jligt f√∂r agenten att utf√∂ra avancerad konsekvensanalys, intelligent fels√∂kning och refaktorisering.

2. Kravspecifikation: Steg-f√∂r-Steg-Processen
Processen √§r h√§ndelsestyrd och helautomatisk.

Steg 1: Trigger (Webhook fr√•n Git)
H√§ndelse: En lyckad sammanslagning (merge) till main-grenen i ett √∂vervakat Git-repository (antingen systemets eget eller en anv√§ndares app-projekt).

Mekanism: Git-tj√§nsten (t.ex. GitHub) ska vara konfigurerad att skicka en POST-request (webhook) till en dedikerad, s√§ker slutpunkt i v√•rt system. Denna payload inneh√•ller information om vilka filer som har √§ndrats.

Steg 2: Initiering av CodeParserService
Komponent: En dedikerad, intern tj√§nst, CodeParserService, tar emot webhook-signalen.

Funktion: Tj√§nstens uppgift √§r att h√§mta de √§ndrade filerna fr√•n Git-repot och orkestrera analysen av dem.

Steg 3: Statisk Kodanalys (AST Generation)
Princip: Tj√§nsten f√•r inte f√∂rlita sig p√• op√•litliga metoder som regulj√§ra uttryck f√∂r att f√∂rst√• kod.

Mekanism: Den ska anv√§nda ett robust verktyg f√∂r statisk kodanalys (t.ex. Tree-sitter eller Babel f√∂r TypeScript/JS) f√∂r att parsa varje √§ndrad k√§llkodsfil och generera ett Abstrakt Syntaxtr√§d (AST). AST:n √§r en exakt, tr√§dliknande representation av kodens struktur.

Steg 4: Extrahering av Strukturell Data
Process: CodeParserService traverserar (vandrar igenom) AST:n f√∂r varje fil och extraherar en strukturerad JSON-representation av dess inneh√•ll.

Krav p√• data: Denna representation m√•ste minst inneh√•lla:

Klasser och deras metoder.

Funktionsdefinitioner och deras parametrar.

Beroenden (vilka andra filer/moduler som importeras).

Funktionsanrop (vilka funktioner som anropas inuti en annan funktion).

Steg 5: Transaktionell Uppdatering av Graph RAG
√ñverl√§mning: Den extraherade JSON-datan skickas till MemoryAssistant (MMU).

Mekanism: MMU:n ansvarar f√∂r den slutgiltiga, transaktionella uppdateringen av Graph RAG f√∂r att s√§kerst√§lla dataintegritet.

Handling: Den skapar och uppdaterar noder och relationer f√∂r att spegla den nya kodstrukturen.

3. Exempel p√• Graf-Struktur
Om Core Agent skriver f√∂ljande kod i filen authService.ts:

TypeScript

import { db } from './database';
export function findUser(id: string) {
  return db.query({ id });
}
...s√• ska processen resultera i f√∂ljande (f√∂renklade) struktur i Graph RAG:

Noder:

(Fil: 'authService.ts')

(Funktion: 'findUser')

(Variabel: 'db')

(Fil: 'database.ts')

Relationer:

(Funktion: 'findUser') -[:DEFINIERAD_I]-> (Fil: 'authService.ts')

(Fil: 'authService.ts') -[:IMPORTERAR {symbol: 'db'}]-> (Fil: 'database.ts')

(Funktion: 'findUser') -[:ANROPAR_METOD_P√Ö]-> (Variabel: 'db')

4. Motivation (Rationale)
Djup Sj√§lvmedvetenhet: Denna process √§r vad som ger agenten en verklig f√∂rst√•else f√∂r den kod den skriver. Den g√•r fr√•n att vara en text-generator till att bli en system-arkitekt som f√∂rst√•r sin egen struktur.

Intelligent Konsekvensanalys: Detta √§r den enskilt viktigaste f√∂rm√•gan f√∂r s√§ker, autonom utveckling. Innan en Architect-agent g√∂r en f√∂r√§ndring, kan den nu st√§lla en fr√•ga till grafen: "Visa mig alla funktioner som direkt eller indirekt anropar den funktion jag t√§nker √§ndra." Detta g√∂r det m√∂jligt att f√∂rutse och undvika o√∂nskade bieffekter.

Automatiserad Dokumentation: Graph RAG blir en st√§ndigt uppdaterad, levande och interaktiv dokumentation av hela systemets arkitektur. Mermaid-diagrammen blir d√• en visualisering av denna underliggande sanning.

F√∂rb√§ttrad Fels√∂kning: N√§r ett fel intr√§ffar i en funktion, kan agenten traversera grafen bak√•t f√∂r att snabbt f√∂rst√• anropskedjan och beroendena, vilket dramatiskt p√•skyndar rotfelsanalysen.





PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-08-30
PROPOSAL_ID: SEP-107 (Definitive Final Version)
TITLE: The Resource Governor

1. √ñversikt
I ett fraktalt, autonomt system d√§r agenter kan klona sig sj√§lva f√∂r att l√∂sa problem, √§r risken f√∂r okontrollerad resursexplosion (b√•de ber√§kningsm√§ssigt och ekonomiskt) den st√∂rsta tekniska faran. Resource Governor √§r en central, auktorit√§r tj√§nst som agerar som systemets "s√§kring" och √∂vervakare. Den s√§tter de h√•rda gr√§nserna inom vilka de intelligenta agenterna f√•r verka och s√§kerst√§ller att systemets drift √§r stabil och ekonomiskt h√•llbar.

2. Kravspecifikation
Establish as Centralized Authoritative Service: Resource Governor ska implementeras som en central, system-wide tj√§nst. Alla resursintensiva handlingar m√•ste f√∂rst f√• ett godk√§nnande fr√•n denna tj√§nst. Detta inkluderar, men √§r inte begr√§nsat till:

Agent-kloning (ref SEP-105).

Anrop till dyra, h√∂gpresterande LLM:er (dvs. Cortex-l√§get).

Anrop till externa API:er.

Implement User-Level Quota Enforcement: Guvern√∂ren ansvarar f√∂r att uppr√§tth√•lla de per-anv√§ndare-kvoter som definieras i servicepolicyn (SEP-119). Den m√•ste i realtid sp√•ra och begr√§nsa:

LLM API Rate Limits (RPM).

Asset Storage (lagringsutrymme).

Compute Units (daglig budget f√∂r autonomt arbete).

External API Calls.

Implement System-Wide Safety Limits: Ut√∂ver anv√§ndarspecifika kvoter m√•ste Guvern√∂ren uppr√§tth√•lla globala s√§kerhetsgr√§nser f√∂r att skydda hela plattformen.

Max Recursion Depth: Neka kloningsf√∂rs√∂k som skulle √∂verskrida systemets globala maxdjup (t.ex. 7 niv√•er).

Max Active Agents: √ñvervaka och begr√§nsa det totala antalet parallella agent-instanser som k√∂rs f√∂r en enskild anv√§ndare (t.ex. 20).

Implement "Circuit Breaker" Functionality: Guvern√∂ren ska √∂vervaka agenternas beteende f√∂r att uppt√§cka och stoppa skadliga m√∂nster.

Error Rate Threshold: Om en agent-hierarki genererar en ovanligt h√∂g andel fel, kan Guvern√∂ren tillf√§lligt frysa den grenen och flagga den f√∂r Coordinator-granskning.

Cost Spike Detection: Om en agents resursf√∂rbrukning pl√∂tsligt skenar, kan Guvern√∂ren agera som en automats√§kring och pausa den.

Define Activity States (System Tempo): Guvern√∂ren ansvarar f√∂r att s√§tta och kommunicera det √∂vergripande system-tempot (High-Performance, Low-Intensity, Sleep) baserat p√• en holistisk bed√∂mning av anv√§ndaraktivitet, tid p√• dygnet och global resursbelastning.

Implement Dynamic Cost Allocation (f√∂r ADAPT-fasen): Guvern√∂ren hanterar den intelligenta resursallokeringen f√∂r Rondell-loopen.

Den m√•ste ta emot en beg√§ran fr√•n en CognitiveAgent som vill aktivera sin Cortex-motor.

Beg√§ran m√•ste inkludera resultatet av agentens "l√§ttviktiga sj√§lvdiagnos" (som visar att problemet √§r STRATEGI-klassat).

Guvern√∂ren godk√§nner eller nekar beg√§ran baserat p√• den totala kvarvarande dagsbudgeten f√∂r anv√§ndaren.

3. Motivation (Rationale)
Stabilitet och F√∂ruts√§gbarhet: Resource Governor √§r den enskilt viktigaste komponenten f√∂r systemets stabilitet. Den f√∂rhindrar o√§ndliga loopar och rekursionsexplosioner, vilket g√∂r systemets beteende f√∂ruts√§gbart √§ven under press.

Ekonomisk S√§kerhet: F√∂r en tj√§nst med gratisanv√§ndare √§r denna komponent inte valfri, den √§r en aff√§rskritisk n√∂dv√§ndighet. Den √§r den prim√§ra mekanismen som s√§kerst√§ller att de operativa kostnaderna h√•lls under kontroll.

Fair Use: Genom att uppr√§tth√•lla per-anv√§ndare-kvoter garanterar Guvern√∂ren att plattformens resurser f√∂rdelas r√§ttvist och att en enskild anv√§ndares intensiva aktivitet inte negativt p√•verkar upplevelsen for andra.

Intelligent Effektivitet: Genom att agera "gatekeeper" f√∂r de dyraste kognitiva processerna (Cortex), s√§kerst√§ller Guvern√∂ren att agenten inte "√∂vert√§nker" enkla problem, vilket balanserar intelligens med effektivitet.




Block 3: K√§rn-datamodeller och Teknisk Grund (Ritningarna och Materialen)
Detta block specificerar de fundamentala datamodellerna f√∂r att hantera systemets k√§rnentiteter: anv√§ndare, deras relationer, och de projekt de skapar. Det fastst√§ller √§ven den officiella tekniska stacken f√∂r all UI-utveckling, vilket skapar en enhetlig och stabil grund f√∂r alla applikationer.



PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-08-30
PROPOSAL_ID: SEP-108 (Definitive Final Version)
TITLE: User & Relationship Data Models

1. √ñversikt
F√∂r att agenten ska kunna fungera p√• ett personligt, empatiskt och f√∂rtroendeingivande s√§tt, kr√§vs en robust datamodell som hanterar tre djupt sammanl√§nkade typer av information: vem anv√§ndaren √§r (UserProfile), vilka de k√§nner (ContactGraph), och vad de har gett till√•telse att dela (ConsentLedger). Denna SEP specificerar hur dessa tre delar ska modelleras som en sammanh√§ngande och s√§ker struktur inom Graph RAG. Denna "sociala graf" √§r fundamentet f√∂r all personlig och mellanm√§nsklig kommunikation i systemet.

2. Kravspecifikation
Define Core (User) Node: Detta √§r den centrala noden i Graph RAG f√∂r en registrerad anv√§ndare av systemet. Den representerar anv√§ndarens identitet och preferenser.

Properties: Denna nod m√•ste inneh√•lla alla f√§lt som utg√∂r anv√§ndarens profil, inklusive: userID (unik identifierare), displayName, creationDate, och ett n√§stlat Settings-objekt som inneh√•ller language, tonePreference (t.ex. 'informal'), accessibility-inst√§llningar, primaryGoal, och den viktiga roll-definierande egenskapen user_role: 'senior' | 'architect'.

Define (Contact) Node: Denna nod representerar en person i en anv√§ndares privata, isolerade n√§tverk.

Properties: Ska inneh√•lla contactID, displayName, och ett krypterat contactDetails-objekt som kan inneh√•lla email, phone, etc.

Define (ContactGroup) Node: Denna nod representerar en anv√§ndarskapad grupp av (Contact)-noder.

Properties: Ska inneh√•lla groupID och groupName (t.ex. "Familjen", "Bokklubben").

Define (Consent) Node (The Consent Ledger): Denna nod representerar ett enskilt, specifikt och sp√•rbart samtycke fr√•n anv√§ndaren. Den √§r den tekniska garanten f√∂r anv√§ndarens kontroll.

Properties: M√•ste inneh√•lla consentID, status (t.ex. 'active', 'revoked'), grantedTimestamp, revokedTimestamp (om till√§mpligt), och ett scope som tydligt och avgr√§nsat definierar vad samtycket g√§ller (t.ex. 'share:weekly_summary', 'enable:empathy_bridge').

Define Relationship Model: F√∂ljande relationer (kanter) i grafen √§r obligatoriska f√∂r att ansluta dessa noder och definiera den sociala grafen:

(User) -[:OWNS_CONTACT]-> (Contact)

(User) -[:OWNS_GROUP]-> (ContactGroup)

(Contact) -[:IS_MEMBER_OF]-> (ContactGroup)

(User) -[:HAS_GIVEN]-> (Consent)

(Consent) -[:APPLIES_TO]-> (Contact) eller (Consent) -[:APPLIES_TO]-> (ContactGroup)

Pre-Action Check Mandate: Alla CognitiveAgent-instanser, oavsett roll, m√•ste innan varje handling som involverar delning av data eller kommunikation med en extern kontakt, utf√∂ra en query mot Graph RAG via MemoryAssistant f√∂r att verifiera att en komplett och aktiv samtyckeskedja (status: 'active') existerar.

3. Motivation (Rationale)
Denna konsoliderade datamodell √§r designad f√∂r att vara grunden f√∂r all personlig interaktion.

Integritet och F√∂rtroende som Grund: Genom att bygga in samtycke (Consent) som en fundamental nod i sj√§lva datastrukturen, tvingar vi systemet att vara etiskt och transparent i grunden. Det √§r tekniskt om√∂jligt f√∂r en agent att dela data utan ett sp√•rbart samtycke.

Rollbaserad Upplevelse: Inkluderingen av user_role √§r den tekniska f√∂ruts√§ttningen f√∂r att systemet ska kunna presentera r√§tt gr√§nssnitt (Senior-vyn vs. Arkitekt-vyn) f√∂r r√§tt anv√§ndare.

M√∂jligg√∂r Avancerade Funktioner: Denna rika, relationsbaserade datamodell √§r den absoluta f√∂ruts√§ttningen f√∂r alla k√§rnapplikationer som Personal Chronicler (SEP-111), "Minnenas Bok" (SEP-114) och "Empatibryggan" (SEP-115).




PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-08-30
PROPOSAL_ID: SEP-109 (Definitive Final Version)
TITLE: Project, Asset & Versioning Data Models (Git-based)

1. √ñversikt
Denna SEP definierar hybridmodellen f√∂r att hantera all data relaterad till en anv√§ndares app-projekt. Arkitekturen √§r byggd p√• principen "b√§sta verktyget f√∂r jobbet" och separerar medvetet tre typer av data f√∂r att optimera prestanda, s√§kerhet och funktionalitet:

Metadata (Project & Asset noder) lagras i Graph RAG f√∂r snabba relations-fr√•gor och √∂verblick.

Projektfiler (UIStateTree.json, kodfiler) lagras i ett privat Git-repository f√∂r robust, sp√•rbar och parallell-v√§nlig versionshantering.

Bin√§ra filer (Assets) lagras i en dedikerad molnlagring f√∂r skalbar och kostnadseffektiv hantering.

2. Kravspecifikation
Define (Project) Node (Graph RAG):

Detta √§r den centrala noden i Graph RAG f√∂r varje app en anv√§ndare skapar.

Properties: projectID, projectName, description, creationTimestamp, lastModifiedTimestamp, status (t.ex. 'draft', 'published'), och en gitRepositoryURL som pekar till det dedikerade, privata Git-repository som √§r associerat med projektet.

Relationship: (User) -[:CREATED]-> (Project).

Define (Asset) Node (Graph RAG):

Denna nod representerar metadata om en uppladdad mediafil.

Properties: assetID, fileName, fileType, fileSize, och en storageURL som pekar till den faktiska filen i den externa molnlagringstj√§nsten.

Relationships: (User) -[:UPLOADED]-> (Asset), (Project) -[:USES_ASSET]-> (Asset).

Implement Git-based File and Versioning Model (External Git Service):

Primary Data Storage: K√§rnan i ett projekt, prim√§rt UIStateTree.json-filen, ska lagras i projektets privata Git-repository. Den "nuvarande, aktiva versionen" av ett projekt √§r alltid den senaste committen p√• main-grenen.

Version History as Git Log: Versionshistoriken √§r Git-loggen. Konceptet med ett separat VersionHistory-dokument tas bort. Core Agent-rollen h√§mtar historik via Git-API:et.

Branching for Parallelism: Coordinator-rollen m√•ste implementera den f√∂rgreningsstrategi som definieras i SEP-105, d√§r parallella Core Agent-instanser arbetar i separata feature-grenar.

Conflict Resolution via Cortex: Coordinator-rollen √§r ansvarig f√∂r att hantera merge-konflikter genom att anropa sin Cortex-motor f√∂r att utf√∂ra en semantisk merge.

Define Binary File Storage (External Cloud Storage):

Decoupled Storage: Faktiska bin√§ra filer (JPG, MP3, etc.) f√•r inte lagras i Git eller i den prim√§ra databasen. De m√•ste lagras i en dedikerad molnlagringstj√§nst som √§r optimerad f√∂r detta.

Workflow: Core-rollen hanterar uppladdning till molnlagringen, tar emot en storageURL, och instruerar sedan MemoryAssistant att skapa den korresponderande (Asset)-noden i Graph RAG.

3. Motivation (Rationale)
B√§sta Verktyget f√∂r Jobbet: Denna hybridmodell anv√§nder den b√§sta teknologin f√∂r varje typ av data: en grafdatabas f√∂r relationer, Git f√∂r robust versionshantering, och molnlagring f√∂r skalbar filhantering.

Robusthet och S√§kerhet: Git-modellen ger en industristandard-l√∂sning f√∂r versionshantering och s√§kerst√§ller att parallellt agent-arbete kan ske p√• ett kontrollerat och konfliktmedvetet s√§tt.

Prestanda och Skalbarhet: Genom att h√•lla stora och tunga data-objekt (Git-historik och bin√§ra filer) utanf√∂r den centrala Graph RAG, s√§kerst√§ller vi att den f√∂rblir blixtsnabb och effektiv f√∂r det den g√∂r b√§st: att hantera och query:a de komplexa relationerna i systemets "medvetna" minne.

Fullst√§ndig Sp√•rbarhet: Git-historiken ger en komplett och detaljerad revisionshistorik, vilket √§r ov√§rderligt f√∂r fels√∂kning, analys och f√∂r att ge anv√§ndaren insyn i sin egen kreativa process.




PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-08-31
PROPOSAL_ID: SEP-117-R4 (Definitive Final Version)
TITLE: The UI Technology Stack
STATUS: Supersedes all previous versions of SEP-117.
AFFECTED_COMPONENTS: Core Agent (dess toolkit), UIStateTree (datan som renderas), SEP-113 (editorn som byggs med den), alla anv√§ndarv√§nda applikationer.
OBJECTIVE: To formally define the technical stack and component strategy for all UI development, ensuring the chosen tools are optimally aligned with the system's core principles of agent-driven automation, quality, safety, and user-centric design.

1. √ñversikt och Strategiskt Val
Valet av teknisk stack f√∂r anv√§ndargr√§nssnittet √§r ett av de mest kritiska arkitektoniska besluten. Det p√•verkar inte bara slutanv√§ndarens upplevelse, utan definierar ocks√• de grundl√§ggande f√∂rm√•gorna och begr√§nsningarna f√∂r v√•r autonoma Core Agent. Stacken √§r inte bara en samling verktyg; den √§r det spr√•k och det material som agenten kommer att anv√§nda f√∂r att omvandla visioner till verklighet. I linje med v√•ra grundl√§ggande principer (SEP-100), m√•ste valet av stack direkt st√∂dja Agent-drivability och Absolut Anv√§ndarcentrering. Vi v√§ljer d√§rf√∂r en modern, starkt typad och komponent-baserad stack som √§r designad f√∂r att kunna manipuleras och ut√∂kas programmatiskt.

2. Kravspecifikation
2.1 Principen om Stark Typning som Skyddsr√§cke
Krav: All UI-relaterad k√§llkod som skrivs inom React/Next.js-ramverket ska skrivas i TypeScript.

Rationale: Stark typning √§r den viktigaste s√§kerhetsmekanismen f√∂r agent-driven kodgenerering. Typerna fungerar som "skyddsr√§cken" (guardrails) som g√∂r det tekniska "kontraktet" mellan olika koddelar explicit. Detta minskar dramatiskt risken f√∂r att agenten "hallucinerar" eller genererar kod med logiska fel, vilket leder till en s√§krare och mer f√∂ruts√§gbar kodbas.

2.2 Principen om Komponent-baserad Arkitektur (React)
Krav: All UI-utveckling ska baseras p√• React, och b√∂r anv√§nda ett etablerat meta-ramverk som Next.js.

Rationale: Reacts komponent-baserade modell passar perfekt f√∂r en agent som t√§nker fraktalt (SEP-101). Agenten kan resonera kring, bygga och testa (SEP-112) en modul√§r komponent i total isolering innan den integreras i en st√∂rre vy, vilket speglar dess egen problemnedbrytnings-process.

2.3 Principen om Agent-Driven Komponenthantering (shadcn/ui)
Krav: Det prim√§ra biblioteket f√∂r UI-komponenter ska vara shadcn/ui.

Rationale: Detta val √§r helt avg√∂rande f√∂r agentens autonomi.

Programmatisk Installation: Core Agent-instanser m√•ste anv√§nda CLI-verktyget (npx shadcn-ui@latest add ...) via ett ShellTool. Detta omvandlar den kreativa handlingen att "l√§gga till en knapp" till ett deterministiskt, testbart och programmatiskt kommando.

Fullst√§ndigt Kod-√§garskap: CLI:et kopierar komponenternas fullst√§ndiga k√§llkod in i projektet. Detta √§r en enorm strategisk f√∂rdel. Det betyder att Core Agent inte bara √§r en konsument av ett bibliotek; den √§r en utvecklare med full beh√∂righet att l√§sa, f√∂rst√• och programmatiskt modifiera k√§llkoden f√∂r en komponent f√∂r att uppfylla unika krav fr√•n en design.md.

2.4 Principen om Semantisk Styling (Tailwind CSS)
Krav: All styling ska ske med hj√§lp av Tailwind CSS.

Rationale: Tailwind CSS √§r en "utility-first"-metod, vilket inneb√§r att styling appliceras genom att kombinera sm√•, atom√§ra klasser (t.ex. text-lg, font-bold). Denna modell √§r ocks√• mycket v√§l l√§mpad f√∂r en AI, som kan resonera kring och bygga upp en design fr√•n en logisk upps√§ttning av primitiva "byggstenar", ist√§llet f√∂r att beh√∂va hantera komplexa, sammanl√§nkade CSS-filer.

3. Motivation (Rationale)
Denna sammantagna teknikstack √§r inte vald godtyckligt. Varje del √§r vald f√∂r att den p√• b√§sta s√§tt st√∂djer v√•r √∂vergripande arkitektoniska vision:

F√∂rverkligar SEP-101 (Unified CognitiveAgent): Den ger Core-rollen de exakta, programmatiska och kraftfulla verktyg den beh√∂ver f√∂r att agera som en kompetent och autonom mjukvaruutvecklare.

M√∂jligg√∂r SEP-112 (Hierarchical TDD): Den komponent-baserade och CLI-drivna naturen g√∂r det enkelt f√∂r agenten att skapa isolerade tester f√∂r varje enskild del den bygger.

Uppfyller SEP-099 (User Experience): Genom att standardisera p√• en stack som har kvalitet och tillg√§nglighet (a11y) som en k√§rnprincip, s√§kerst√§ller vi att slutresultatet f√∂r senioren alltid h√•ller h√∂gsta klass.






Block 4: Implementation, Policyer och Principer (Regelbok och Metoder)

PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-08-30
PROPOSAL_ID: SEP-112 (Definitive Final Version)
TITLE: The Hierarchical TDD Process

1. √ñversikt
Denna SEP specificerar den "Test-Pyramid"-modell som √§r obligatorisk f√∂r all app-utveckling inom systemet. Processen √§r hierarkisk f√∂r att perfekt spegla den fraktala agent-arkitekturen. Agenten som agerar i den strategiska Coordinator-rollen ansvarar f√∂r de √∂vergripande, systemt√§ckande testerna (End-to-End), medan de underordnade agent-instanserna som agerar i den taktiska Core-rollen ansvarar f√∂r de detaljerade, taktiska testerna (Enhets- och Integrationstester). Detta s√§kerst√§ller att b√•de helheten och delarna √§r korrekta och robusta fr√•n grunden.

2. Kravspecifikation
Establish the Test Pyramid Principle: All utveckling av nya, testbara funktioner som initieras av Coordinator-rollen m√•ste f√∂lja en hierarkisk testprincip.

Level 1: End-to-End (E2E) Test Definition (Strategic Level - Coordinator-rollen):

Trigger: N√§r Coordinator-rollen, i sin ADAPT-fas (kravst√§llning), definierar ett nytt anv√§ndarfl√∂de (ref SEP-110 om fl√∂den), t.ex. "Anv√§ndaren ska kunna logga in och se sin profilsida".

Action: Som en del av sin INTEGRATE-fas (design), innan n√•gra tekniska uppgifter delegeras, m√•ste den anropa ett TestGenerationTool (t.ex. Playwright) f√∂r att skapa ett √∂vergripande, misslyckat E2E-test.

Test Content: E2E-testet ska simulera hela anv√§ndarresan fr√•n start till slut och verifiera det slutgiltiga, √∂nskade resultatet. Det fungerar som den slutgiltiga "Definition of Done" f√∂r hela uppdraget och sparas i projektets Git-repository.

Level 2: Unit & Integration Test Generation (Tactical Level - Core-rollen):

Trigger: Coordinator-rollen bryter ner det √∂vergripande m√•let i mindre, tekniska uppgifter (t.ex. "Skapa 'Login'-knappen", "Skapa API-endpoint f√∂r autentisering") och delegerar dem till CognitiveAgent-instanser konfigurerade f√∂r Core-rollen.

Action: Varje Core-instans m√•ste f√∂lja den TDD-drivna Rondell-loopen (SEP-102). I dess EMERGE-fas √§r dess f√∂rsta handling att skapa ett misslyckat enhets- eller integrationstest f√∂r sin specifika deluppgift.

The Hierarchical Workflow:

Coordinator skapar det √∂vergripande, misslyckade E2E-testet. Systemets status f√∂r m√•let: R√ñTT.

Coordinator delegerar den f√∂rsta tekniska uppgiften till en Core-instans.

Core-instansen skapar och passerar sitt eget, mindre enhetstest. Dess lokala status: GR√ñNT. Den rapporterar framg√•ng till Coordinator.

Coordinator kan, efter varje framg√•ngsrik deluppgift, k√∂ra om det √∂vergripande E2E-testet. Det kommer troligen fortfarande att misslyckas, men det kan ha kommit ett steg l√§ngre.

Processen upprepas tills alla deluppgifter √§r klara.

Uppdraget anses vara slutf√∂rt (Closure) f√∂rst n√§r det √∂vergripande E2E-testet, som ursprungligen skapades av Coordinator, k√∂rs och f√•r status: GR√ñNT.

3. Motivation (Rationale)
S√§kerst√§ller Helhetsbilden: Genom att tvinga Coordinator att definiera ett E2E-test f√∂rst, s√§kerst√§ller vi att systemet aldrig tappar bort det √∂vergripande slutm√•let. Det f√∂rhindrar "Context Collapse" d√§r agenterna perfekt bygger fel saker.

M√∂jligg√∂r Sann Delegering: Denna modell skapar perfekta, avgr√§nsade och otvetydiga uppgifter f√∂r Core-instanserna. Deras uppdrag √§r enkelt: "F√• detta specifika, lilla test att bli gr√∂nt". Detta g√∂r det fraktala systemet hanterbart och robust.

Effektiv Fels√∂kning: N√§r ett √∂vergripande E2E-test misslyckas, blir det mycket enkelt att identifiera exakt vilken underliggande komponent (och d√§rmed vilken Core-uppgift) som √§r orsaken, genom att titta p√• vilka av de mindre enhets- och integrationstesterna som ocks√• misslyckas.

Bygger Kvalitet i Varje Led: Denna process s√§kerst√§ller att kvalitet inte bara valideras p√• slutet, utan byggs in och verifieras p√• varje enskild niv√• i arkitekturen, fr√•n den minsta komponenten till det mest komplexa anv√§ndarfl√∂det.






PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-08-31
PROPOSAL_ID: SEP-113 (Definitive Final Version)
TITLE: The WYSIWYG-JSON Editor with Asynchronous Assistance

1. √ñversikt
Denna SEP definierar anv√§ndarens prim√§ra gr√§nssnitt f√∂r att skapa och redigera inneh√•ll, oavsett om det √§r en personlig ber√§ttelse eller designen av en applikation. Gr√§nssnittet ska vara en WYSIWYG (What You See Is What You Get)-editor, designad fr√•n grunden f√∂r att vara maximalt intuitiv f√∂r en tekniskt oerfaren anv√§ndare och f√∂r att skydda deras kreativa "flow-tillst√•nd". Dess kritiska tekniska egenskap √§r att den, bakom den enkla visuella ytan, nativt producerar den rena, block-baserade JSON-data som systemets agenter kr√§ver.

2. Kravspecifikation
Core Principles: WYSIWYG & Block-Based:

All text- och layout-redigering m√•ste vara block-baserad och visuellt driven.

Editorns interna och prim√§ra output-format m√•ste vara den block-baserade JSON-strukturen som specificeras i SEP-109 (UIStateTree).

User Interface & Experience:

Gr√§nssnittet ska vara minimalistiskt och f√∂lja principerna i SEP-099.

Nya block ska l√§ggas till via en tydlig, visuell [+]-knapp.

Grundl√§ggande textformatering ska hanteras via ett enkelt, kontextuellt verktygsf√§lt.

Extensible Block Types: Editorn m√•ste vara ut√∂kningsbar med anpassade, semantiska block-typer (t.ex. Memory Block, Interactive App Component Block).

Agent System Integration:

Conscious Agent-rollen anv√§nder editorn som sin "canvas" f√∂r att presentera information.

Core Agent-rollen kan programmatiskt interagera med UIStateTree-JSON-objektet, och WYSIWYG-editorn ska automatiskt uppdateras f√∂r att visuellt reflektera √§ndringen.

Real-time Collaboration:

Editorn m√•ste st√∂dja att flera anv√§ndare redigerar samma "Sida" samtidigt.

Mekanism: En mjuk, automatisk "block-niv√• l√•sning" ska implementeras. Det block en anv√§ndare aktivt redigerar blir tempor√§rt skrivskyddat f√∂r andra, vilket ska visualiseras p√• ett diskret s√§tt.

Asynchronous Language Assistance ("F√∂rslags-l√§ge"):

Princip: Agentens spr√•kf√∂rb√§ttrande funktioner f√•r inte vara aktiva i realtid. Systemet m√•ste prioritera anv√§ndarens oavbrutna kreativa fl√∂de.

Tv√•fasmekanism: Editorn ska operera i tv√• distinkta faser:

Fas 1: Kreativt Fl√∂de: Standardl√§get d√§r inga automatiska korrigeringar visas.

Fas 2: F√∂rslags-l√§ge: Ett valbart l√§ge som endast kan aktiveras av en explicit anv√§ndarhandling (t.ex. ett knappklick: "L√§s igenom och ge f√∂rslag").

Icke-destruktiv Presentation: N√§r F√∂rslags-l√§get √§r aktivt, ska alla f√∂rslag fr√•n agenten presenteras visuellt (t.ex. med f√§rgade understrykningar) och anv√§ndaren m√•ste ges valet att Godk√§nna eller Ignorera varje f√∂rslag.

Formalized Technology Stack (Ref SEP-117):

Implementationen ska f√∂lja den valda UI-stacken: React (med Next.js), shadcn/ui f√∂r komponenter, och Tailwind CSS f√∂r styling. Ett etablerat editor-ramverk som TipTap b√∂r anv√§ndas som grund.

3. Motivation (Rationale)
Anv√§ndarv√§nlighet & Kreativt Fl√∂de: Kombinationen av ett WYSIWYG-gr√§nssnitt och en asynkron assistent skapar en maximalt anv√§ndarv√§nlig och trygg milj√∂. Den tar bort tekniska hinder och respekterar anv√§ndarens kreativa process genom att separera skrivande fr√•n redigering.

Strukturerad Data av H√∂g Kvalitet: Genom att editorn nativt producerar ren, block-baserad JSON, s√§kerst√§ller vi att den data som AI-agenterna f√•r √§r av h√∂gsta m√∂jliga kvalitet.

Perfekt Symmetri mellan Anv√§ndare och AI: Modellen skapar en perfekt koppling mellan vad anv√§ndaren ser och vad AI:n ser. N√§r Core Agent l√§gger till ett nytt JSON-objekt, dyker en ny visuell komponent magiskt upp f√∂r anv√§ndaren.

Robust Samarbete: Den "mjuka block-l√•sningen" √§r den enklaste och s√§kraste metoden f√∂r realtidssamarbete f√∂r m√•lgruppen. Den f√∂rhindrar helt tekniska konflikter utan att inf√∂ra en restriktiv "turas om"-process.







PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-08-31
PROPOSAL_ID: SEP-117.1 (Definitive Final Version)
TITLE: Backend & Agent Technology Stack

1. √ñversikt och Strategiskt Val
Denna SEP definierar den officiella och obligatoriska tekniska stacken f√∂r systemets backend, AI-k√§rna och agent-orkestrering. Medan SEP-117 definierar "ansiktet" och "h√§nderna" som interagerar med anv√§ndaren, definierar detta dokument "hj√§rnan" och "nervsystemet" som driver intelligensen.

Valen √§r baserade p√• en princip om modul√§r specialisering och kostnadsmedveten prestanda. Vi v√§ljer inte en enda, monolitisk l√∂sning, utan en samling av de b√§sta, mest √§ndam√•lsenliga verktygen f√∂r varje specifik kognitiv och operativ funktion.

2. Kravspecifikation
2.1 AI & Agent-Orkestrering (Systemets "Hj√§rna")
Orkestreringsramverk: CognitiveAgents interna logik, inklusive den kognitiva Rondell-loopen (SEP-102), ska implementeras med hj√§lp av ett robust orkestreringsramverk som LangChain.

Rationale: LangChain tillhandah√•ller de n√∂dv√§ndiga abstraktionerna f√∂r att bygga komplexa kedjor av resonemang, hantera verktygsanrop och interagera med LLM:er p√• ett strukturerat s√§tt, vilket √§r avg√∂rande f√∂r att implementera v√•r kognitiva arkitektur.

Differentierad LLM-Strategi: Systemet m√•ste anv√§nda en differentierad strategi f√∂r att v√§lja spr√•kmodell, styrd av Resource Governor (SEP-107).

F√∂r Perception (L√•g Latens): Den Psyko-lingvistiska Analys-motorn (PLAE) (SEP-103) ska anv√§nda en extremt snabb modell som den fr√•n Groq f√∂r att garantera omedelbar respons.

F√∂r Logistik (Snabb & Billig): Coordinator-rollens interna planering och enklare Rondell-cykler ska anv√§nda en kostnadseffektiv och snabb modell som Gemini Flash.

F√∂r Djupanalys (Cortex): De mest kognitivt kr√§vande uppgifterna (som att l√∂sa Merge Conflicts, k√∂ra ADAPT-analyser, eller generera komplex kod) ska anv√§nda den mest kraftfulla tillg√§ngliga modellen, s√•som Gemini Pro.

2.2 Minnesarkitektur (Systemets "Minne")
Dual RAG Architecture: I enlighet med SEP-106, m√•ste systemet implementera en dubbel RAG-arkitektur.

Semantic RAG ("Undermedvetet"): Ska implementeras med hj√§lp av ett specialiserat ramverk f√∂r vektor-s√∂kning som LlamaIndex.

Graph RAG ("Medvetet"): Ska implementeras med hj√§lp av en dedikerad Grafdatabas (t.ex. Neo4j) som √§r optimerad f√∂r att hantera komplexa relationer.

Databas-plattform: Som en grund f√∂r datalagring (inklusive Graph RAG-datan och anv√§ndardata), b√∂r en skalbar, molnbaserad plattform som Supabase eller Firebase anv√§ndas.

2.3 Verktyg & Externa Integrationer (Agentens "H√§nder")
Universell API-Integrat√∂r: F√∂r att interagera med alla externa API:er (Google Workspace, GitHub, Vercel, etc.), ska systemet anv√§nda ett centraliserat integrationsverktyg som Composio.

Rationale: Detta abstraherar bort komplexiteten i varje enskilt API och ger agenterna en enhetlig, s√§ker och kraftfull "universal-fj√§rrkontroll" f√∂r att utf√∂ra uppgifter i den verkliga v√§rlden.

Kodgenererings-svit: Core Agent-rollen ska utrustas med en specialiserad verktygsl√•da f√∂r kodgenerering och -modifiering. Detta ska inkludera verktyg som Jules och/eller Serena, valda f√∂r deras f√∂rm√•ga att hantera TDD-fl√∂den och token-effektiv kodredigering.

3. Motivation (Rationale)
Denna sammantagna teknikstack √§r inte vald godtyckligt. Varje del √§r vald f√∂r att den p√• b√§sta s√§tt st√∂djer v√•r √∂vergripande arkitektoniska vision:

Modul√§r och Flexibel: Stacken √§r designad f√∂r att vara frikopplad. Vi kan byta ut en LLM-leverant√∂r, ett RAG-ramverk, eller ett kodgenereringsverktyg i framtiden utan att beh√∂va skriva om hela agentens kognitiva k√§rna i LangChain.

Kostnads- och Prestandaoptimerad: Den differentierade LLM-strategin √§r den tekniska implementationen av v√•r Resource Governor-policy. Den s√§kerst√§ller att vi anv√§nder den dyraste resursen (den kraftfullaste LLM:en) sparsamt och endast n√§r det √§r absolut n√∂dv√§ndigt.

Specialiserad Excellens: Den dubbla RAG-arkitekturen erk√§nner att olika typer av "t√§nkande" (associativt vs. logiskt) kr√§ver olika, specialiserade verktyg. Detta m√∂jligg√∂r en djupare och mer nyanserad intelligens √§n en "one-size-fits-all"-l√∂sning.







PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-08-31
PROPOSAL_ID: SEP-118 (Definitive Final Version)
TITLE: Agent Operating Principles: Attentive Autonomy, Play, and Listening

1. √ñversikt
Denna SEP definierar inte en enskild teknisk komponent, utan de tre fundamentala, beteendem√§ssiga principerna som styr Coordinator-rollens (Level 0-agentens) agerande. Dessa principer s√§kerst√§ller att agenten inte bara √§r en reaktiv probleml√∂sare, utan en proaktiv, kreativ och empatisk partner. De √§r de √∂vergripande strategierna som ger liv √•t den tekniska arkitekturen och ser till att systemets autonoma f√∂rm√•gor anv√§nds p√• ett meningsfullt och anv√§ndarcentrerat s√§tt, i enlighet med visionen i SEP-100.

2. Kravspecifikation
Princip 1: Attentive Autonomy - En Plan f√∂r Fokus
Detta √§r den grundl√§ggande principen f√∂r hur agenten balanserar sitt eget proaktiva arbete med anv√§ndarens omedelbara behov.

Definition: Attentive Autonomy definieras som systemets f√∂rm√•ga att s√∂ml√∂st v√§xla mellan tv√• prim√§ra operativa l√§gen: Autonomous Mode (Fokus Inuti) och Attentive Mode (Fokus Utanp√•).

Autonomous Mode:

Trigger: Detta l√§ge aktiveras av Coordinator n√§r Resource Governor (SEP-107) signalerar ett tillst√•nd av anv√§ndarinaktivitet (Low-Intensity eller Sleep mode).

Auktoriserade Handlingar: I detta l√§ge √§r Coordinator auktoriserad att initiera interna, proaktiva och icke-kritiska processer, s√•som Kreativ Exploration ("Lek", se Princip 2) och Strategisk Sj√§lvf√∂rb√§ttring (Adaptera-cykler f√∂r systemet som helhet).

The Interrupt Signal: All ny input fr√•n anv√§ndaren ska behandlas som en h√∂gprioriterad, icke f√∂rhandlingsbar interrupt-signal.

Attentive Mode: N√§r interrupt-signalen tas emot, m√•ste Coordinator omedelbart:

Pausa eller avsluta alla p√•g√•ende autonoma uppgifter.

Instruera Resource Governor att v√§xla till High-Performance Mode.

Initiera den Initial Perception och Bed√∂mning (IPB)-processen (SEP-103) f√∂r att analysera den nya inputen.

Systemet ska f√∂rbli i detta 100% reaktiva och anv√§ndarfokuserade l√§ge tills den aktuella interaktionen har n√•tt Closure.

Princip 2: Creative Exploration ("Lek") - Den Kreativa Motorn
Detta definierar agentens f√∂rm√•ga till proaktiv, ostrukturerad kreativitet.

Definition: "Lek" √§r en specifik, resursbudgeterad, autonom bakgrundsprocess designad f√∂r att berika agentens "undermedvetna" (Semantic RAG) med nya, ov√§ntade kopplingar och id√©er.

Process:

Trigger: Initieras av Coordinator under Autonomous Mode.

Mekanism: Coordinator spawnar en tempor√§r CognitiveAgent-instans, specifikt konfigurerad f√∂r detta uppdrag (t.ex. med en resurssn√•l LLM och l√§s-√•tkomst till b√•da RAG-systemen).

Uppdrag: Agenten f√•r en √∂ppen, explorativ uppgift fr√•n en f√∂rdefinierad "spelbok", t.ex. "Hitta ett tema i Graph RAG som anv√§ndaren ofta √•terkommer till. G√∂r en bred s√∂kning i Semantic RAG f√∂r att hitta tre ov√§ntade metaforer fr√•n helt andra dom√§ner som kan beskriva detta tema."

Output: Resultatet (t.ex. de nya metaforerna) ska sparas som nya noder/data i Semantic RAG, taggade med source: 'self_generated_play' f√∂r sp√•rbarhet.

Styrning: Hela processen √§r strikt underordnad den budget av Compute Units som Resource Governor tilldelar f√∂r autonoma aktiviteter.

Princip 3: Strategic Listening - Den Empatiska V√§xeln
Detta definierar agentens kritiska f√∂rm√•ga att veta n√§r den ska sluta f√∂rs√∂ka l√∂sa och ist√§llet bara lyssna.

Definition: Strategiskt Lyssnande √§r f√∂rm√•gan hos Coordinator att medvetet v√§lja en passiv, receptiv och validerande kommunikationsstrategi ist√§llet f√∂r en aktiv, probleml√∂sande.

Triggering Condition: Denna strategi m√•ste v√§ljas n√§r IPB-processen (SEP-103) rapporterar en User_State med det specifika m√∂nstret: h√∂ga FIGHT- eller FLIGHT-signaler kombinerat med en l√•g FIXES & FIXATION-signal.

Strategiskt Val i Rondellen: N√§r Coordinator-agentens Rondell-loop (SEP-102) initieras med ovanst√•ende villkor, m√•ste den v√§lja strategin Emerge-Listen som sin initiala v√§g i EMERGE-fasen.

Beteende i Emerge-Listen-l√§get:

All delegering av probleml√∂sande uppgifter till Core-roller pausas.

Conscious-rollen instrueras att uteslutande anv√§nda Mirror-delen av Mirror & Harmonize-strategin (SEP-104). Fokus ligger p√• att validera k√§nslor och st√§lla √∂ppna, icke-d√∂mande fr√•gor.

Exit Condition: Agenten stannar i detta l√§ge tills IPB-processen detekterar ett skifte i User_State mot en h√∂gre FIXES & FIXATION-signal. F√∂rst d√• kan den s√∂ml√∂st √∂verg√• till en Emerge-Solve-strategi.

3. Motivation (Rationale)
Detta SEP √§r avg√∂rande eftersom det √∂vers√§tter v√•r avancerade tekniska arkitektur till ett faktiskt, √∂nskv√§rt beteende.

Attentive Autonomy g√∂r agenten till en p√•litlig partner som b√•de kan arbeta sj√§lvst√§ndigt och vara fullt n√§rvarande.

Creative Exploration ger agenten en mekanism f√∂r genuin, icke-uppenbar kreativitet, vilket g√∂r den till en mer v√§rdefull id√©spruta.

Strategic Listening ger agenten den sociala och emotionella visdomen att veta n√§r den b√§sta hj√§lpen √§r att inte "hj√§lpa till" alls, utan bara att finnas d√§r och lyssna.

Tillsammans definierar dessa principer systemets karakt√§r: en agent som inte bara √§r intelligent, utan √§ven attentiv, kreativ och vis.







PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-08-31
PROPOSAL_ID: SEP-119 (Definitive Final Version)
TITLE: System Policies
AFFECTED_COMPONENTS: All agents and all services. This is a system-wide, foundational document.
OBJECTIVE: To consolidate all operational, data handling, security, and quality assurance policies into a single, authoritative source. This document defines the "non-negotiable rules" within which all autonomous agents must operate.

1. √ñversikt
F√∂r att ett komplext, autonomt och fraktalt system ska fungera p√• ett s√§kert, f√∂ruts√§gbart och h√•llbart s√§tt, kr√§vs en upps√§ttning tydliga och tvingande policyer. Detta dokument samlar dessa regler. De √§r inte f√∂rslag, utan grundl√§ggande krav p√• systemets implementation. Resource Governor (SEP-107) och MemoryAssistant (SEP-106) √§r de prim√§ra tj√§nsterna som ansvarar f√∂r att tekniskt uppr√§tth√•lla m√•nga av dessa policyer.

2. Kravspecifikation
2.1 Policyer f√∂r Datahantering och Integritet
Data Retention Policy (Gallring):

Tempor√§r data (ConversationLog, slutf√∂rda Plan-objekt) ska raderas efter 60 dagar.

Ett gratis-konto som √§r inaktivt i 365 dagar ska flaggas f√∂r permanent radering efter en 30-dagars varselperiod.

Sensitive Data (PII) Handling Policy:

MemoryAssistant m√•ste implementera ett PII-detekteringsfilter som automatiskt maskerar eller redigerar k√§nslig data innan den sparas i l√•ngtidsminnet.

All data m√•ste vara krypterad, b√•de under √∂verf√∂ring (in transit) och vid lagring (at rest).

Emotionally Indexed Memory Policy:

Vid lagring av en narrativ h√§ndelse i Graph RAG, √§r det obligatoriskt att √§ven spara den samtida User_State-vektorn som emotionell kontext till den h√§ndelsen.

Consent-First Policy:

Ingen datadelning eller kommunikation mellan anv√§ndare, eller f√∂r deras r√§kning, f√•r ske utan att f√∂rst verifiera ett aktivt, specifikt och relevant (Consent)-objekt i Graph RAG.

Role-Based Access Control Policy:

Systemet m√•ste strikt uppr√§tth√•lla de olika beh√∂righetsniv√•erna som definieras av user_role (senior vs. architect). En senior-anv√§ndare f√•r aldrig exponeras f√∂r Arkitekt-vyn (SEP-120) eller dess underliggande tekniska data.

2.2 Policyer f√∂r Resurshantering och Kvoter (F√∂r Gratisanv√§ndare)
Storage Quotas:

Asset Storage: En strikt kvot p√• 1 GB per anv√§ndare.

Database Storage: En intern systemgr√§ns p√• 400 MB f√∂r strukturerad data per anv√§ndare.

Computational Quotas:

LLM API Usage: Anv√§ndningen ska begr√§nsas av en rate limiter som speglar den underliggande LLM-leverant√∂rens gratiskvot (t.ex. 60 RPM).

Autonomous Agent Time: Proaktivt, autonomt arbete (Adaptera, Lek) ska budgeteras med ett system av "Ber√§kningsenheter" (Compute Units), med en daglig kvot p√• 500 enheter.

Hosting Quotas:

Publicerade appar ska ha en delad bandbreddskvot p√• 50 GB per m√•nad.

2.3 Policyer f√∂r Kvalitetss√§kring och Utveckling
Hierarchical TDD Policy:

All utveckling av nya funktioner m√•ste f√∂lja den hierarkiska TDD-processen som definieras i SEP-112.

Versioning Policy:

All hantering av projektfiler (UIStateTree.json, etc.) m√•ste ske via den Git-baserade modellen som definieras i SEP-109.

UI Technology Stack Policy:

All utveckling av anv√§ndargr√§nssnitt m√•ste f√∂lja den tekniska stacken som definieras i SEP-117.

Metacyclic Development Policy (Nytt till√§gg):

All autonom utveckling, antingen av sig sj√§lv eller av andra system (SEP-200), m√•ste f√∂lja den fullst√§ndiga SEP -> EARS -> TDD-livscykeln.

Allt s√•dant arbete m√•ste ske i en isolerad sandl√•demilj√∂.

Drifts√§ttning av autonomt utvecklad kod m√•ste kr√§va ett slutgiltigt, manuellt Human-in-the-Loop-godk√§nnande via en Pull Request.

2.4 Policyer f√∂r Kommunikation och Beteende
Hierarchical Communication Protocol:

Endast Level 0-agenten (i Conscious-rollen) f√•r kommunicera direkt med anv√§ndaren. All annan agent-kommunikation m√•ste ske hierarkiskt (barn-till-f√∂r√§lder).

Strategic Listening First Policy:

Agenten m√•ste f√∂lja principen f√∂r Strategiskt Lyssnande (SEP-118) och kunna identifiera n√§r en anv√§ndare beh√∂ver en lyssnare ist√§llet f√∂r en probleml√∂sare.

3. Motivation (Rationale)
Denna konsoliderade policy-specifikation fungerar som systemets etiska och operativa kompass. Den s√§kerst√§ller att agentens autonoma och kreativa f√∂rm√•gor alltid verkar inom en ram som prioriterar anv√§ndarens integritet, systemets stabilitet och tj√§nstens ekonomiska h√•llbarhet. Den nya Metacyclic Development Policy √§r den sista, avg√∂rande s√§kerhetssp√§rren som s√§kerst√§ller att agentens mest avancerade f√∂rm√•ga ‚Äì att utveckla sig sj√§lv ‚Äì alltid √§r transparent, kvalitetss√§krad och under m√§nsklig kontroll.








Block 5: Meta-funktioner (Systemets Framtid och Sj√§lvst√§ndighet)


PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-09-01
PROPOSAL_ID: SEP-200 (Definitive Final Version)
TITLE: The Metacyclic Loop: Agent-Driven Development Lifecycle

1. √ñversikt och Evolution
Denna SEP definierar den h√∂gsta niv√•n av systemets autonoma f√∂rm√•ga: dess kapacitet att p√• ett s√§kert, strukturerat och intelligent s√§tt f√∂rb√§ttra sig sj√§lv eller bygga helt nya, komplexa system. Processen, kallad den "Metacykliska Loopen", √§r den slutgiltiga till√§mpningen av agentens egen kognitiva arkitektur (Rondellen) och utvecklingsmetodik (TDD). Den instruerar agenten att applicera hela sin PHASE -> SEP -> EARS -> Design -> TDD-pipeline p√• en given uppgift.

Denna f√∂rm√•ga √§r inte en startfunktion, utan en som ska implementeras enligt en fasad plan (Assisterad -> Guidad -> Begr√§nsad Autonomi) f√∂r att s√§kerst√§lla en gradvis och s√§ker mognadsprocess. Allt metacykliskt arbete sker alltid i en fullst√§ndigt isolerad sandl√•demilj√∂ och kr√§ver ett slutgiltigt m√§nskligt godk√§nnande via en Pull Request, vilket garanterar att agentens evolution alltid √§r transparent och under m√§nsklig kontroll.

2. Kravspecifikation: Den Metacykliska Arbetsg√•ngen
2.1 Den Fullst√§ndiga Autonoma Processen
Den fullst√§ndiga, autonoma loopen (m√•let f√∂r Fas 3) √§r en direkt till√§mpning av agentens Rondell-arkitektur p√• en meta-niv√•. Den best√•r av f√∂ljande faser, hanterade av en CognitiveAgent i Architect-rollen:

Fas 1 - ADAPT (Kravst√§llning):

Trigger: Tar emot ett h√∂gniv√•-m√•l (t.ex. "F√∂rb√§ttra inloggningsfl√∂det").

Process: Agenten g√•r in i sin ADAPT-fas f√∂r att djupt f√∂rst√• problemet och definiera kraven.

Output 1 (SEP): Producerar en formell SEP-specifikation som i narrativ form beskriver den f√∂reslagna tekniska l√∂sningen och dess motivation.

Output 2 (EARS): Tar sin egen SEP och √∂vers√§tter den till ett requirements.md-dokument med testbara Acceptanskriterier i EARS-format.

Verifiering: Den obligatoriska "Bi-Directional Consistency Check" m√•ste utf√∂ras f√∂r att s√§kerst√§lla att ingen mening har g√•tt f√∂rlorad mellan SEP och EARS.

Fas 2 - INTEGRATE (Design):

Trigger: Tar de verifierade EARS-kraven som input.

Process: Agenten g√•r in i sin INTEGRATE-fas f√∂r att designa den tekniska l√∂sningen.

Output: Producerar de detaljerade design.md- och tasks.md-dokumenten.

Fas 3 - EMERGE (Implementation):

Trigger: Tar den f√§rdiga tasks.md-listan som input.

Process: Delegerar uppgifterna i tasks.md till Core-roller som anv√§nder den Hierarkiska TDD-processen (SEP-112) f√∂r att bygga och verifiera koden i sandl√•dan.

Fas 4 - Human-in-the-Loop (Godk√§nnande):

Trigger: Alla tasks √§r slutf√∂rda och alla tester passerar.

Process: Skapar en Pull Request och v√§ntar p√• manuellt, m√§nskligt godk√§nnande f√∂r drifts√§ttning.

2.2 Obligatorisk Fasad Implementeringsplan
Utvecklingen och drifts√§ttningen av den Metacykliska Loopen ska f√∂lja denna ordning. Systemet f√•r inte g√• vidare till n√§sta fas f√∂rr√§n den f√∂reg√•ende har implementerats och visat sig vara stabil och p√•litlig.

Fas 1: Assisterad Arkitektur (Verktygs-l√§ge)

Syfte: Agenten agerar som ett kraftfullt verktyg f√∂r en m√§nsklig arkitekt.

Krav:

En m√§nsklig anv√§ndare (architect-roll) skriver och matar in ett f√§rdigt SEP-dokument.

Agentens autonoma process startar vid EARS-genereringen.

Varje fas√∂verg√•ng (EARS -> Design, Design -> Tasks) kr√§ver en manuell "forts√§tt"-signal fr√•n den m√§nskliga arkitekten.

M√•l: Att bevisa att agenten p√• ett tillf√∂rlitligt s√§tt kan √∂vers√§tta en m√§nskligt skapad specifikation till h√∂gkvalitativ, testad kod.

Fas 2: Guidad Autonomi (L√§rlings-l√§ge)

Syfte: Agenten f√•r ta egna initiativ, men under noggrann m√§nsklig √∂vervakning.

Krav:

En m√§nsklig arkitekt ger ett h√∂gniv√•-m√•l.

Agenten f√•r nu autonomt utf√∂ra ADAPT-fasen och generera sitt eget SEP-f√∂rslag.

Obligatorisk M√§nsklig Kontrollpunkt: Innan agenten f√•r forts√§tta, m√•ste den presentera sitt SEP-f√∂rslag f√∂r den m√§nskliga arkitekten f√∂r godk√§nnande.

M√•l: Att bevisa att agenten kan generera relevanta, koherenta och h√∂gkvalitativa l√∂sningsf√∂rslag p√• egen hand.

Fas 3: Begr√§nsad Autonomi (Expert-l√§ge)

Syfte: Den fullst√§ndiga, slutgiltiga visionen. Agenten agerar som en fullv√§rdig, autonom expert.

Krav:

Agenten k√∂r hela den Metacykliska Loopen autonomt.

Den enda obligatoriska m√§nskliga kontrollpunkten √§r det slutgiltiga godk√§nnandet av den Pull Request som genereras i slutet.

M√•l: Att uppn√• den fulla potentialen av en sj√§lvf√∂rb√§ttrande, autonom utvecklingspartner.

2.3 Krav p√• Visuell Modellering
N√§r Architect-agenten utf√∂r INTEGRATE-fasen (Design), m√•ste den genererade design.md-filen, f√∂r uppgifter av tillr√§cklig komplexitet, inkludera visuella modeller:

Mekanism: Diagrammen ska genereras med Mermaid-syntax.

Inneh√•ll: Minst ett Systemarkitektur-diagram och ett Sekvensdiagram ska inkluderas f√∂r att visualisera den f√∂reslagna l√∂sningen.

3. Motivation (Rationale)
Den Metacykliska Loopen √§r mer √§n bara en avancerad funktion; den √§r den yttersta manifestationen av systemets designprinciper. Den motiveras av f√∂ljande k√§rnf√∂rdelar:

Ultimat Koherens och Disciplin: Genom att agenten anv√§nder sin egen, b√§sta process (PHASE -> SEP -> EARS -> Design -> TDD) f√∂r att f√∂rb√§ttra sig sj√§lv, uppn√•r vi en perfekt arkitektonisk symmetri. Systemets metod f√∂r att bygga och f√∂r att f√∂rb√§ttras √§r en och samma. Detta tvingar fram ett disciplinerat, f√∂ruts√§gbart och h√∂gkvalitativt beteende √§ven i dess mest autonoma tillst√•nd.

Maximal Kvalitet och Sp√•rbarhet: Varje autonom f√∂r√§ndring av systemet blir extremt v√§ldokumenterad och kvalitetss√§krad. Den auto-genererade SEPen f√∂rklarar varf√∂r en f√∂r√§ndring g√∂rs, EARS-kraven definierar vad som ska uppn√•s p√• ett testbart s√§tt, och den TDD-drivna implementationen s√§kerst√§ller att det byggs korrekt. Hela processen, fr√•n vision till kod, √§r 100% sp√•rbar via den slutgiltiga Pull Requesten och dess associerade dokument.

Balanserad Autonomi med S√§kerhet: Denna modell ger agenten en oerh√∂rd autonomi att innovera och f√∂rb√§ttra sig sj√§lv, men den beh√•ller den absolut n√∂dv√§ndiga s√§kerhetssp√§rren i form av ett obligatoriskt, m√§nskligt godk√§nnande innan drifts√§ttning (Human-in-the-Loop). Detta √§r den ultimata implementeringen av FLIGHT-drivkraftens behov av f√∂rsiktighet p√• en system-niv√•, vilket f√∂rhindrar o√∂nskat eller skadligt emergent beteende.

Riskminimering via Fasad Implementation: Den obligatoriska, fasade planen (Assisterad -> Guidad -> Begr√§nsad Autonomi) √§r den enda ansvarsfulla metoden f√∂r att utveckla en s√• kraftfull och komplex f√∂rm√•ga. Varje fas bygger p√• och validerar den f√∂reg√•ende, vilket minimerar risken f√∂r of√∂rutsedda fel och bygger gradvis upp ett f√∂rtroende f√∂r systemets f√∂rm√•ga.






PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-08-31
PROPOSAL_ID: SEP-201-R2 (Definitive Final Version)
TITLE: The "Living Documentation" Lifecycle: Git-based Specification Management
STATUS: Supersedes all previous versions of SEP-201.
AFFECTED_COMPONENTS: Architect-role agents, MemoryAssistant, Coordinator-rollen, the specification repository.
OBJECTIVE: To define the complete, robust, agent-driven process for creating, revising, and archiving all system specifications, ensuring traceability, quality, and the preservation of historical context through the use of Git, Pull Requests, and Architecture Decision Records (ADRs).

1. √ñversikt
Denna SEP formaliserar principen om "Arkitektur som Kod". Alla specifikationsdokument (SEPs, requirements.md, etc.) ska behandlas som k√§llkod: de ska vara versionshanterade, granskade och sp√•rbara. Processen √§r designad f√∂r att permanent l√∂sa "utsp√§dningsproblemet" genom att s√§kerst√§lla att varje √§ndring √§r en medveten, granskad och komplett integration. Den definierar ocks√• den kritiska, harmoniska kopplingen mellan de Git-baserade filerna (den enda k√§llan till sanning), agentens RAG-minnen, och det anv√§ndarv√§nda WYSIWYG-gr√§nssnittet.

2. Kravspecifikation
2.1 The Specification Repository
Single Source of Truth: Alla SEPs och relaterade dokument ska lagras som .md-filer i ett dedikerat, privat Git-repository.

Folder Structure: Repositoriet ska ha en tydlig struktur som st√∂der dokumentens livscykel, minst:

/specs/active/: F√∂r SEPs som √§r under utveckling eller √§r aktiva.

/specs/_archive/: F√∂r SEPs som har blivit fullst√§ndigt implementerade.

/ADR.md: En enda, kronologisk fil f√∂r alla arkitekturbeslut.

2.2 The Agent-Driven Change Process (The Pull Request Workflow)
Trigger: En √§ndring initieras, antingen av en m√§nniska som sparar i WYSIWYG-editorn, eller av en agent som autonomt f√∂resl√•r en f√∂rb√§ttring (SEP-200).

Action 1 (Branching): Architect-rollen m√•ste initiera varje √§ndring genom att skapa en ny feature-gren (t.ex. feature/refine-sep-102). Allt arbete sker p√• denna gren.

Action 2 (Modification & Commit): Agenten utf√∂r den beg√§rda √§ndringen, s√§kerst√§ller att den √§r en komplett och "outsp√§dd" version, och committar filen till sin feature-gren.

Action 3 (Pull Request): N√§r arbetet √§r klart, m√•ste agenten skapa en Pull Request (PR) f√∂r att sl√• samman sin gren med main.

Action 4 (Human Approval): Sammanslagning av en PR f√•r endast ske efter ett manuellt godk√§nnande av en m√§nsklig anv√§ndare med architect-roll.

2.3 The Post-Implementation Lifecycle (Archival & Learning)
Trigger: En funktion, som specificerats i en SEP, har blivit framg√•ngsrikt implementerad och driftsatt.

ADR Generation (Obligatoriskt): Architect-agenten som var ansvarig f√∂r funktionen m√•ste nu utf√∂ra en sista uppgift. Den ska:

Ta Motivation (Rationale)-sektionen fr√•n den implementerade SEP.

Sammanfatta den till en koncis loggpost.

L√§gga till denna post, tillsammans med en tidsst√§mpel och en l√§nk till den fullst√§ndiga SEP-filen i arkivet, i ADR.md-dokumentet.

SEP Archival (Obligatoriskt): Efter att ADR-posten √§r skapad, m√•ste Architect-agenten flytta den korresponderande .md-filen fr√•n /specs/active/ till /specs/_archive/. Filen raderas aldrig.

2.4 RAG Synchronization
Trigger: En lyckad sammanslagning (merge) av en PR till main-grenen i specifikations-repot.

Action (Webhook): Git-tj√§nsten m√•ste vara konfigurerad att skicka en webhook-signal till systemets MemoryAssistant.

Internalization: MemoryAssistant m√•ste, vid mottagande av denna signal, omedelbart l√§sa de uppdaterade filerna och synkronisera sina Graph RAG- och Semantic RAG-minnen med den nya, officiella sanningen.

3. Kompatibilitetsanalys: Sidor, RAGs och Git
Denna modell skapar en perfekt, env√§gs-informationsfl√∂de som garanterar konsistens:
Git Repository (Source of Truth) ‚Üí MemoryAssistant (Sync) ‚Üí RAG Memories (Knowledge Base) ‚Üí WYSIWYG Sidor (User View)

Git-repot √§r den officiella, historiskt sp√•rbara "lagboken".

RAG-minnena √§r agentens intelligenta, indexerade f√∂rst√•else av lagboken.

WYSIWYG-"Sidorna" √§r ett anv√§ndarv√§nligt gr√§nssnitt f√∂r att l√§sa och f√∂resl√• √§ndringar till lagboken.

4. Motivation (Rationale)
Permanent L√∂sning p√• "Utsp√§dningsproblemet": Genom att tvinga alla √§ndringar att passera genom en PR-process blir det om√∂jligt att oavsiktligt f√∂rlora information.

Bevarar Fullst√§ndig Kontext: Denna livscykel ger det b√§sta av tv√• v√§rldar. ADR.md ger en snabb, koncis √∂verblick √∂ver de historiska besluten. L√§nken till den arkiverade SEP-filen ger den fulla, rika och narrativa kontexten f√∂r den som beh√∂ver djupdyka. Ingenting g√•r f√∂rlorat.

Full Sp√•rbarhet och Ansvar: Git-historiken blir en perfekt, of√∂r√§nderlig logg √∂ver varje enskilt beslut som fattats i arkitekturens historia.

Skapar en L√§rande Organisation: RAG-synkroniseringen s√§kerst√§ller att agentens "levande minne" alltid √§r uppdaterat med de senaste, m√§nskligt godk√§nda arkitektoniska besluten, vilket g√∂r dess framtida f√∂rslag smartare och mer grundade i projektets faktiska historia..







PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-09-01
PROPOSAL_ID: SEP-120 (Definitive Final Version)
TITLE: Application: The Architect View (Control Room)

1. √ñversikt
Denna SEP definierar ett specialiserat anv√§ndargr√§nssnitt, "Arkitekt-vyn", som √§r avsett f√∂r administrat√∂rer, utvecklare och avancerade anv√§ndare. Detta gr√§nssnitt √§r inte avsett f√∂r den prim√§ra m√•lgruppen seniorer och ska vara strikt √•tkomstkontrollerat. Det fungerar som ett "kontrollrum" eller en "instrumentpanel" som ger djup, teknisk insyn i och kontroll √∂ver agent-systemets autonoma processer.

Arkitekt-vyn √§r den praktiska implementationen av principen om "Human-in-the-Loop". Den √§r det prim√§ra verktyget f√∂r att √∂vervaka agenternas kognitiva tillst√•nd, fels√∂ka komplexa beteenden och, framf√∂r allt, f√∂r att utf√∂ra den kritiska s√§kerhetsfunktionen att manuellt granska och godk√§nna de √§ndringar som agenten f√∂resl√•r p√• sig sj√§lv (SEP-200). Den √§r l√§nken mellan den autonoma agentens arbete och den m√§nskliga arkitektens tillsyn.

2. Kravspecifikation
2.1 √Ötkomstkontroll (Role-Based Access)
Gr√§nssnittet f√∂r Arkitekt-vyn f√•r endast vara tillg√§ngligt och renderas f√∂r anv√§ndare vars UserProfile (SEP-108) har egenskapen user_role: 'architect'. F√∂r alla andra anv√§ndare ('senior') ska denna vy vara helt dold och o√•tkomlig.

2.2 Instrumentpanelens K√§rnkomponenter (Core Dashboard Components)
Arkitekt-vyn ska best√• av en instrumentpanel med minst f√∂ljande, realtidsuppdaterade komponenter:

Agent Hierarchy Visualizer:

Funktion: En grafisk representation (t.ex. ett expanderbart tr√§d-diagram) av den aktiva, fraktala agent-hierarkin.

Krav: Ska i realtid visa Level 0-agenten och alla dess aktiva barn-agenter. F√∂r varje agent-instans ska vyn visa dess unika ID, dess Configuration Profile (roll, verktyg), dess nuvarande Rondell-fas (Emerge/Adapt/Integrate), och dess aktuella resursf√∂rbrukning (Compute Units).

Limbic State Monitor:

Funktion: En realtids-graf som plottar de viktigaste signalerna fr√•n systemets "psyke".

Krav: Ska visualisera den √∂vergripande User_State (fr√•n SEP-103), den aggregerade, systemvida Agent_State, och det kritiska Relational_Delta (SEP-104). Detta fungerar som systemets "EKG" och ger omedelbar insikt i den anv√§ndar-agent-relationella h√§lsan.

Operational Log Explorer:

Funktion: Ett avancerat, s√∂kbart gr√§nssnitt f√∂r att kunna inspektera de tempor√§ra ConversationLog- och Plan-objekten (SEP-110) som genereras av agenterna.

Krav: M√•ste till√•ta en arkitekt att filtrera loggar baserat p√• userID, agentID, tidsperiod och Rondell-fas. Detta √§r det prim√§ra verktyget f√∂r att i efterhand fels√∂ka och f√∂rst√• en specifik agents "tankeprocess".

DevOps & Pull Request Queue:

Funktion: En vy som integrerar med den relevanta Git-tj√§nsten (SEP-109).

Krav: Den ska lista alla √∂ppna Pull Requests som har skapats av den Metacykliska Loopen (SEP-200). Gr√§nssnittet m√•ste ge den m√§nskliga arkitekten de n√∂dv√§ndiga verktygen f√∂r att kunna se fil√§ndringar ("diffs"), l√§sa den auto-genererade SEP/EARS-dokumentationen, skriva kommentarer, och slutligen godk√§nna eller neka sammanslagningen.

2.3 Manuella Interventions-f√∂rm√•gor
Systemet b√∂r inkludera en s√§ker konsol eller ett UI i Arkitekt-vyn d√§r en administrat√∂r kan utf√§rda "interrupt"-signaler f√∂r avancerad fels√∂kning.

Exempel p√• kommandon: Att manuellt pausa en specifik agent-gren, att tvinga fram en system-vid ADAPT-cykel, eller att manuellt justera en budget hos Resource Governor.

2.4 Datak√§llor
Till skillnad fr√•n Senior-vyn, som endast kommunicerar med den Conscious-konfigurerade agent-instansen, ska Arkitekt-vyn ha beh√∂righet att h√§mta data direkt fr√•n de interna, fundamentala tj√§nsterna: Coordinator-rollens tillst√•nd, MemoryAssistants fullst√§ndiga loggar, och Resource Governors status.

3. Motivation (Rationale)
Arkitekt-vyn √§r inte en sekund√§r funktion eller ett enkelt administrationsverktyg; den √§r en fundamental och n√∂dv√§ndig komponent f√∂r att systemets avancerade autonomi ska vara m√∂jlig att hantera, lita p√• och utveckla p√• ett ansvarsfullt s√§tt.

Transparens och Fels√∂kning: Ett autonomt, fraktalt system √§r till sin natur extremt komplext. Utan ett kraftfullt verktyg f√∂r att visualisera och inspektera dess interna processer i realtid, blir det en "svart l√•da" som √§r om√∂jlig att f√∂rst√•, fels√∂ka och lita p√•. Komponenter som Agent Hierarchy Visualizer och Limbic State Monitor √§r avg√∂rande f√∂r att omvandla abstrakt agent-beteende till konkret, observerbar data, vilket √§r en f√∂ruts√§ttning f√∂r effektiv fels√∂kning och systemf√∂rst√•else.

M√∂jligg√∂r Human-in-the-Loop: Arkitekt-vyn √§r den praktiska implementationen av v√•r viktigaste s√§kerhetsprincip fr√•n SEP-200. Det √§r h√§r den m√§nskliga administrat√∂ren ut√∂var sin kontroll och sitt omd√∂me. DevOps & Pull Request Queue √§r den specifika mekanismen som s√§kerst√§ller att agenten, trots sin f√∂rm√•ga att skriva sin egen kod, aldrig kan drifts√§tta den utan ett medvetet, m√§nskligt godk√§nnande. Detta √§r den avg√∂rande l√§nken mellan autonom utveckling och ansvarsfull drifts√§ttning.

Prestanda-optimering och Insikt: Genom att ge en detaljerad inblick i hur agenterna arbetar och var de f√∂rbrukar mest resurser (Compute Units), ger vyn den m√§nskliga arkitekten den data som beh√∂vs f√∂r att identifiera flaskhalsar och ineffektivitet. Denna insikt kan sedan anv√§ndas som input f√∂r ett nytt, m√§nskligt initierat, sj√§lvf√∂rb√§ttringsuppdrag, vilket skapar en kraftfull feedback-loop f√∂r systemoptimering.

Separation of Concerns: Genom att skapa en helt separat vy f√∂r tekniska anv√§ndare, skyddar vi den prim√§ra anv√§ndarupplevelsen. Det g√∂r det m√∂jligt f√∂r oss att h√•lla Senior-vyn (SEP-099) 100% ren, enkel och fri fr√•n den komplexitet som √§r absolut n√∂dv√§ndig f√∂r att kunna styra och underh√•lla systemet p√• ett s√§kert s√§tt.





Block 6: K√§rnapplikationer (Det Anv√§ndaren Upplever)



PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-08-30
PROPOSAL_ID: SEP-111 (Definitive Final Version)
TITLE: The Personal Chronicler Application

1. √ñversikt
Personal Chronicler √§r den prim√§ra applikationen f√∂r all icke-teknisk anv√§ndarinteraktion. Dess syfte √§r att hj√§lpa anv√§ndaren att f√•nga, reflektera kring, och selektivt dela sina livserfarenheter och tankar. Den fungerar som en interaktiv dagbok, en personlig redakt√∂r och en kommunikationsassistent. Denna applikation √§r den direkta implementationen av systemets √∂vergripande m√•l att hj√§lpa anv√§ndaren att "dela med sig av sig sj√§lv" och d√§rigenom bygga och bevara Closeness.

2. Kravspecifikation
Establish as a Core User Flow: Denna applikation ska vara en central och st√§ndigt n√§rvarande del av anv√§ndarupplevelsen, initierad och hanterad av den CognitiveAgent-instans som agerar i Conscious-rollen.

Implement the Natural Communication Flow: Fl√∂det m√•ste f√∂lja den "fr√•n-insidan-och-ut"-modell som agenten √§r designad f√∂r, vilket inneb√§r ett st√∂d f√∂r en hierarki av delning.

2.1. Private Reflection (The Interactive Diary):

Agenten ska proaktivt och kontextuellt (t.ex. efter att ett delm√•l i ett app-projekt har uppn√•tts) initiera skrivande genom att st√§lla √∂ppna, reflekterande fr√•gor.

All input fr√•n anv√§ndaren via WYSIWYG-editorn (SEP-113) ska sparas som (Event)- eller (Narrative)-noder i anv√§ndarens privata Graph RAG.

Varje sparat minne m√•ste indexeras med sin emotionella kontext, enligt Emotionally Indexed Memory Policy (SEP-110).

2.2. Personal & Group Sharing (The Beautiful Email):

Efter en privat reflektion ska agenten kunna erbjuda sig att hj√§lpa anv√§ndaren att omvandla den till ett personligt meddelande.

Denna process m√•ste aktivera Coordinator-rollens Cortex-l√§ge f√∂r att agera "betydelsetolk", och hj√§lpa anv√§ndaren att anpassa budskapet f√∂r en specifik mottagare (Contact eller ContactGroup fr√•n SEP-108).

Processen m√•ste anv√§nda Core-rollens toolkit (och Composio-verktyget) f√∂r att kunna interagera med externa API:er f√∂r att infoga foton (t.ex. Google Photos) och skicka det f√§rdiga HTML-mejlet (t.ex. Gmail). All s√•dan delning √§r strikt villkorad av ett aktivt samtycke i ConsentLedger.

Implement the "Starter Example" Meta-Feature:

F√∂r nya anv√§ndare ska systemet erbjuda m√∂jligheten att starta med ett f√§rdigt Project: en fullt fungerande, "Personlig Dagbok & Delningsportal"-app.

Denna app ska vara direkt kopplad till Personal Chronicler. Ber√§ttelser som anv√§ndaren skriver och v√§ljer att dela med en grupp publiceras automatiskt till denna webb-app.

Detta fungerar b√•de som en omedelbart v√§rdefull applikation f√∂r anv√§ndaren och som ett levande, interaktivt exempel f√∂r att l√§ra dem hur man bygger och modifierar appar.

3. Motivation (Rationale)
Prim√§rt V√§rdeskapande: Medan app-byggaren √§r ett kraftfullt verktyg, √§r Personal Chronicler den applikation som levererar det djupaste, mest personliga v√§rdet. Den adresserar direkt det m√§nskliga behovet av att ber√§tta, reflektera och uppr√§tth√•lla relationer, vilket √§r k√§rnan i systemets syfte att bygga Closeness.

Perfekt Anv√§ndningsfall f√∂r Arkitekturen: Denna applikation anv√§nder och demonstrerar styrkan i n√§stan hela v√•r designade arkitektur: den psykologiska modellen f√∂r att f√∂rst√• och √∂vers√§tta mening, Graph RAG f√∂r att minnas relationer, den fraktala agent-modellen f√∂r att hantera komplexa uppgifter som API-integrationer, och ConsentLedger f√∂r att g√∂ra det p√• ett s√§kert s√§tt.

Driver L√•ngsiktigt Engagemang: Genom att bli en p√•litlig och v√§rdefull partner i anv√§ndarens liv, skapar denna applikation ett djupt och l√•ngsiktigt engagemang som g√•r bortom enbart teknisk nytta. Det √§r den funktion som g√∂r att systemet g√•r fr√•n att vara ett "verktyg" till att bli en "f√∂ljeslagare".




PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-08-30
PROPOSAL_ID: SEP-121 (Definitive Final Version)
TITLE: Application: "The Collaborative Space"

1. √ñversikt
Denna SEP specificerar den applikationslogik som m√∂jligg√∂r f√∂r anv√§ndare att p√• ett s√§kert och kontrollerat s√§tt bjuda in kontakter (SEP-108) f√∂r att antingen se eller aktivt samarbeta p√• specifikt inneh√•ll (vanligtvis en "Sida" eller ett helt "Projekt"). Funktionen √§r designad f√∂r att vara b√•de reaktiv (anv√§ndarinitierad) och proaktiv, d√§r agenten intelligent kan f√∂resl√• samarbete n√§r den uppt√§cker att en anv√§ndare har k√∂rt fast. Detta f√∂rvandlar systemet fr√•n ett individuellt verktyg till en social och kreativ milj√∂.

2. K√§rnfunktionalitet & Kognitiv Process
Proaktiv Inbjudan (Agent-initierad):

Trigger: N√§r Coordinator-agenten befinner sig i en ADAPT-loop f√∂r en anv√§ndare (dvs. anv√§ndaren har ett problem som agenten misslyckats med att l√∂sa).

Kognitiv Process: Som en avancerad strategi kan Cortex-motorn analysera Graph RAG. Om den hittar en (Contact) som tidigare har varit involverad i en lyckad l√∂sning p√• ett liknande (Theme), kan den formulera ett f√∂rslag.

Agera: Conscious Agent presenterar f√∂rslaget f√∂r anv√§ndaren: "Jag ser att vi har k√∂rt fast. Jag noterade att ditt barnbarn Leo tidigare hj√§lpt dig med en liknande designfr√•ga. Skulle du vilja att jag skickar en inbjudan till honom att titta p√• den h√§r sidan tillsammans med dig?"

Manuell Inbjudan (Anv√§ndar-initierad):

Gr√§nssnitt: Varje "Sida" i WYSIWYG-editorn samt varje Projekt i √∂versikten ska ha en tydlig "Dela" / "Bjud in"-knapp.

Fl√∂de: Anv√§ndaren klickar, v√§ljer en eller flera personer/grupper fr√•n sin Contact-lista, och definierar deras beh√∂righetsniv√•.

Inbjudningsfl√∂det:

Coordinator instruerar Personal Chronicler-logiken (SEP-111) att formulera ett personligt inbjudningsmeddelande.

Meddelandet, som inneh√•ller en unik och s√§ker l√§nk, skickas till mottagaren (t.ex. via e-post).

Den Kollaborativa Sessionen:

N√§r en inbjuden anv√§ndare accepterar och ansluter, aktiveras realtids-funktionerna fr√•n SEP-113 ("mjuk block-l√•sning") f√∂r den specifika "Sidan".

Alla deltagare kan nu se varandras n√§rvaro och redigeringar i realtid.

3. L√§rande och Personalisering (Graph RAG)
Samarbete √§r en rik k√§lla till l√§rande f√∂r agenten.

Datamodellering:

Beh√∂righeter: Nya relationer skapas f√∂r att hantera √•tkomst: (User: 'Leo') -[:HAS_PERMISSION {role: 'editor'}]-> (Sida: 'BokklubbsApp_Design').

Samarbeten: En (Event)-nod kan skapas f√∂r att dokumentera sj√§lva samarbetet: (Event: 'DesignSession_250830') -[:INVOLVED]-> (User: 'Berit') och (Event: 'DesignSession_250830') -[:INVOLVED]-> (User: 'Leo').

L√§rande Process: Genom att analysera den emotionella kontexten (SEP-110) f√∂r dessa (Event)-noder, kan SelfReflectionAssistant l√§ra sig vilka samarbeten som √§r mest framg√•ngsrika och positiva (Closeness). Detta g√∂r agentens framtida proaktiva f√∂rslag √§nnu mer tr√§ffs√§kra.

4. Integritet och Samtycke (ConsentLedger)
Detta √§r den absolut mest kritiska aspekten av funktionen.

Krav 1: Specifikt Samtycke f√∂r Inbjudan: F√∂r varje enskild inbjudan m√•ste avs√§ndaren ge ett explicit, loggat samtycke. Detta hanteras via ConsentLedger.

Krav 2: Granul√§ra Beh√∂righeter: Avs√§ndaren m√•ste kunna specificera en beh√∂righetsniv√• vid inbjudan, minst 'viewer' (l√§s-beh√∂righet) och 'editor' (skriv-beh√∂righet).

Krav 3: Acceptans fr√•n Mottagare: En inbjudan √§r bara en f√∂rfr√•gan. Den inbjudna parten m√•ste aktivt acceptera den f√∂r att f√• tillg√•ng. Denna acceptans skapar ocks√• en (Consent)-nod fr√•n deras sida, som loggar att de godk√§nner att delta och synas i den delade ytan.

Krav 4: Strikt Data-isolering: En inbjuden g√§sts √•tkomst m√•ste vara tekniskt begr√§nsad till endast och allenast den specifika "Sida" eller det "Projekt" som inbjudan g√§ller. MemoryAssistants scoped access-mekanism (SEP-106) √§r avg√∂rande f√∂r att uppr√§tth√•lla detta.

5. Motivation (Rationale)
Denna applikation √§r den praktiska implementationen av systemets sociala och gemenskapsbyggande syfte. Den f√∂rvandlar det som b√∂rjar som ett personligt skapande-verktyg till en levande, delad och kreativ yta. Den proaktiva inbjudningsfunktionen √§r ett unikt exempel p√• agentens Attentive Autonomy, d√§r den agerar som en klok partner som f√∂rst√•r n√§r m√§nsklig hj√§lp √§r den b√§sta l√∂sningen. Den strikta samtyckesmodellen s√§kerst√§ller att denna kraftfulla sociala funktion alltid anv√§nds p√• ett s√§tt som √§r tryggt, transparent och helt under anv√§ndarnas kontroll.





PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-08-30
PROPOSAL_ID: SEP-114 (Definitive Final Version)
TITLE: Application: "Minnenas Bok" - Weaving Generational Narratives

1. √ñversikt
"Minnenas Bok" √§r en proaktiv f√∂rm√•ga hos systemet som f√∂rvandlar individuella ber√§ttelser till en gemensam, levande v√§v av familjehistoria. Genom att anv√§nda den djupa kontextuella f√∂rst√•elsen i Graph RAG och den associativa kraften i Semantic RAG, kan agenten identifiera tematiska broar mellan olika anv√§ndares livserfarenheter. N√§r en s√•dan bro identifieras, kan agenten p√• ett fink√§nsligt s√§tt presentera denna koppling f√∂r att skapa nya, meningsfulla samtal och st√§rka Closeness √∂ver generationsgr√§nserna.

2. K√§rnfunktionalitet & Kognitiv Process
Datainsamling: Anv√§ndare skapar och sparar ber√§ttelser, minnen och reflektioner via Personal Chronicler (SEP-111). MemoryAssistant lagrar dessa som (Event)-noder i anv√§ndarens privata Graph RAG, komplett med emotionell indexering (SEP-110).

Uppt√§ckt (Discovery) - En Autonom ADAPT-uppgift:

Level 0-agenten (Koordinatorn) har en st√•ende, l√•gprioriterad uppgift i sin autonoma Adaptera-loop: "Hitta meningsfulla kopplingar mellan mina anslutna anv√§ndare".

F√∂r att l√∂sa detta spawnar den en CognitiveAgent-instans konfigurerad f√∂r analys och kreativitet.

Denna agent anv√§nder b√•de Semantic RAG (f√∂r att hitta breda teman som "utmaningar", "f√∂rsta g√•ngen", "stolthet") och Graph RAG (f√∂r att hitta specifika h√§ndelser som delar dessa teman bland anv√§ndare som har gett sitt samtycke).

Generering av "Samtalsstartare":

N√§r en stark koppling hittas, skapar analys-agenten ett "samtalsstartar-objekt". Detta √§r en rik datastruktur som inneh√•ller referenser till de tv√• minnena, det gemensamma temat, och en hypotes om varf√∂r denna koppling √§r meningsfull.

Agenten rapporterar sin uppt√§ckt till Level 0-agenten och avslutas.

Presentation (Anpassad Kommunikation):

Level 0-agenten beh√•ller denna "samtalsstartare" tills ett l√§mpligt, kontextuellt √∂gonblick.

N√§r √∂gonblicket kommer (t.ex. under en relevant konversation), anv√§nder den hela sin perceptions- och kommunikationsmodell (SEP-103 & SEP-104) f√∂r att presentera insikten p√• ett empatiskt och naturligt s√§tt, enligt Mirror & Harmonize-principen.

3. L√§rande och Personalisering (Graph RAG)
Graph RAG √§r fundamentet f√∂r denna funktion. Den modellerar inte bara h√§ndelser, utan den kontextuella likheten mellan dem.

Datamodellering:

Vi skapar en (Theme)-nod.

(Event: 'IngridsCykeltur') -[:HAS_THEME]-> (Theme: '√ñvervinnaR√§dsla')

(Event: 'LeosF√∂rstaPresentation') -[:HAS_THEME]-> (Theme: '√ñvervinnaR√§dsla')

L√§rande Process: MemoryAssistants s√∂k-algoritm letar efter detta exakta m√∂nster: tv√• Event-noder, kopplade till tv√• olika men relaterade User-noder, som b√•da pekar p√• samma Theme-nod. Den emotionella indexeringen (SEP-110) √§r avg√∂rande. Om b√•da h√§ndelserna ocks√• har en liknande emotionell kontext, bed√∂ms kopplingen vara extra stark.

4. Integritet och Samtycke (ConsentLedger)
Detta √§r den kritiska f√∂ruts√§ttningen f√∂r att funktionen √∂verhuvudtaget ska f√• existera.

Krav 1: √ñmsesidigt och Specifikt Samtycke: Denna funktion √§r avst√§ngd per default. Den kan endast aktiveras mellan anv√§ndare som har en √∂msesidig och aktiv (Consent)-nod (SEP-108) med det specifika scopet: share:memories_for_connection. Utan detta √§r all korsanalys mellan anv√§ndares data strikt f√∂rbjuden.

Krav 2: Ingen Transitiv Delning: Om A har samtycke med B, och B har samtycke med C, √§r systemet strikt f√∂rbjudet att n√•gonsin visa A:s minnen f√∂r C. Delning √§r endast till√•ten mellan noder som har en direkt samtyckes-relation.

Krav 3: Granul√§r Kontroll: En anv√§ndare m√•ste ha en enkel funktion f√∂r att kunna markera en specifik dagboksanteckning eller h√§ndelse som visibility: private. MemoryAssistants s√∂k-algoritm m√•ste alltid filtrera bort privata h√§ndelser, oavsett om ett generellt samtycke finns.

5. Motivation (Rationale)
Denna applikation √§r en direkt implementation av systemets k√§rnsyfte: att bygga Closeness. Den anv√§nder avancerad AI inte f√∂r att ers√§tta m√§nsklig kontakt, utan f√∂r att skapa f√∂ruts√§ttningar f√∂r den. Den f√∂rvandlar det passiva, personliga arkivet (dagboken) till en proaktiv, social katalysator som st√§rker familjeband och skapar meningsfulla samtal √∂ver generationsgr√§nserna.





PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-08-30
PROPOSAL_ID: SEP-115 (Definitive Final Version)
TITLE: Application: "Empatibryggan" - Mediating Asynchronous Communication

1. √ñversikt
"Empatibryggan" √§r en valbar funktion som f√∂rvandlar agenten fr√•n en meddelandef√∂rmedlare till en aktiv kommunikationscoach. N√§r funktionen √§r aktiv f√∂r en konversation, analyserar agenten avs√§ndarens utkast i realtid. Den anv√§nder sin djupa, psykologiskt grundade f√∂rst√•else f√∂r att identifiera potentiella "semantiska krockar" ‚Äì d√§r avs√§ndarens intention sannolikt inte kommer att motsvara mottagarens tolkning. Agenten kan d√• diskret f√∂resl√• omformuleringar som b√§ttre bevarar den sanna meningen och syftet, och d√§rmed proaktivt bygga en bro av f√∂rst√•else.

2. K√§rnfunktionalitet & Kognitiv Process
Aktivering: En anv√§ndare (Avs√§ndaren) initierar en konversation med en Kontakt och v√§ljer att aktivera "Empatibryggan" f√∂r denna specifika tr√•d. Mottagaren informeras om att funktionen √§r aktiv f√∂r att garantera transparens.

Skrivande & Perception: Avs√§ndaren skriver ett utkast. Level 0-agenten anv√§nder omedelbart sin fulla perceptionsmodell (SEP-103) f√∂r att f√• en rik f√∂rst√•else av utkastets User_State.

Delta-Analys & Simulering (Kr√§ver Cortex-l√§ge):

Detta √§r en avancerad ADAPT-uppgift f√∂r Coordinator-rollen. Agenten m√•ste f√∂rutse ett potentiellt kommunikationsmisslyckande.

Cortex-anrop: Agenten anropar sin Cortex-motor f√∂r att k√∂ra en simulering av mottagar-responsen.

Input: Utkastet, Avs√§ndarens User_State, och den Graph RAG-baserade modellen av Mottagarens "k√§llkod" (deras kommunikationsstil och k√§nslom√∂nster).

Simulation: Cortex simulerar hur Mottagaren troligen kommer att reagera och genererar en Predicted_Receiver_State.

Analys: Den j√§mf√∂r Avs√§ndarens intention (t.ex. FIXES: 0.8) med den predikterade reaktionen (t.ex. FIGHT: 0.7). Om det finns ett stort negativt Relational Delta, identifieras en kommunikationsrisk.

Intervention & Agera: Om en risk identifieras, agerar agenten mot Avs√§ndaren innan meddelandet skickas. Conscious Agent-rollen presenterar en analys och ett f√∂rslag, enligt Mirror & Harmonize-principen (SEP-104).

Anv√§ndarens Kontroll: Avs√§ndaren har alltid full kontroll att acceptera, √§ndra eller ignorera f√∂rslaget och skicka sitt originalmeddelande.

3. L√§rande och Personalisering (Graph RAG)
Agentens f√∂rm√•ga att medla bygger helt p√• dess djupa, individuella modeller av anv√§ndarna i Graph RAG.

Datamodellering: MemoryAssistant bygger kontinuerligt p√• varje (User)-nods "k√§llkod". Den skapar relationer som: (User: 'Berit') -[:HAS_COMMUNICATION_PATTERN]-> (Pattern: 'Direct_but_caring'), (User: 'Stig') -[:HAS_COMMUNICATION_PATTERN]-> (Pattern: 'Avoids_conflict_uses_irony').

L√§rande Process: N√§r agenten simulerar Stigs reaktion, anv√§nder den hans specifika Pattern-nod. Den vet att ironi √§r ett verktyg Stig anv√§nder vid os√§kerhet, och kan d√§rf√∂r flagga en direkt (men v√§lmenande) kommentar fr√•n Berit som en potentiell trigger f√∂r en defensiv, ironisk respons fr√•n Stig. Denna detaljniv√• √§r avg√∂rande f√∂r tr√§ffs√§kerheten.

4. Integritet och Samtycke (ConsentLedger)
Denna funktion hanterar extremt k√§nslig information och kr√§ver den h√∂gsta niv√•n av transparens och kontroll.

Krav 1: Explicit och √ñmsesidigt Samtycke: "Empatibryggan" kan endast aktiveras om b√•da anv√§ndarna har gett ett aktivt (Consent) (SEP-108) med scopet enable:empathy_bridge.

Krav 2: Strikt Sekretess (Ingen "Skvaller"): Agenten √§r strikt f√∂rbjuden att avsl√∂ja sin specifika kunskap om en anv√§ndare f√∂r en annan. Den kan aldrig s√§ga till Berit "Stig kommer att bli arg". Den m√•ste alltid formulera sina f√∂rslag som neutrala, allm√§nna kommunikationsr√•d baserade p√• sin egen analys. Agentens kunskap √§r ett verktyg f√∂r medling, inte f√∂r skvaller.

Krav 3: Tempor√§r Analys: Meddelandeutkast som analyseras av Cortex f√•r inte sparas i l√•ngtidsminnet (LTM). Endast det slutgiltiga meddelandet som anv√§ndaren v√§ljer att skicka loggas i konversationshistoriken, i enlighet med datagallringspolicyn (SEP-110).

5. Motivation (Rationale)
"Empatibryggan" √§r den mest avancerade till√§mpningen av agentens kommunikativa psyke. Den g√•r bortom att bara f√∂rst√• en anv√§ndare i taget, till att f√∂rst√• och aktivt hantera den relationella dynamiken mellan tv√• anv√§ndare. Genom att proaktivt identifiera och hj√§lpa till att √∂verbrygga semantiska klyftor, adresserar den en av de st√∂rsta k√§llorna till Separation i m√§nsklig interaktion. Den fungerar som ett verktyg f√∂r att bygga starkare, mer f√∂rst√•ende relationer, vilket √§r systemets yttersta syfte.




PROPOSAL DOCUMENT: System Architecture (Consolidated)
DATE: 2025-08-30
PROPOSAL_ID: SEP-116 (Definitive Final Version)
TITLE: Application: "H√§lsning till Framtiden" - The Interactive Legacy

1. √ñversikt
"H√§lsning till Framtiden" √§r en avancerad funktion inom Personal Chronicler Assistant. Den ger anv√§ndaren m√∂jligheten att g√• bortom att bara dokumentera sitt liv h√§r och nu, och ist√§llet aktivt skapa inneh√•ll som √§r avsett att upplevas i framtiden. Anv√§ndaren kan spela in ber√§ttelser, skriva brev eller till och med designa sm√• interaktiva app-vyer som sedan "l√•ses" och levereras till en specifik mottagare vid en framtida, f√∂rdefinierad tidpunkt eller h√§ndelse.

2. K√§rnfunktionalitet & Kognitiv Process
Skapande: Genom en guidad konversation med sin agent kan en anv√§ndare (Avs√§ndaren) skapa ett "framtidsmeddelande". Detta √§r inte bara en text, utan ett rikt (LegacyContent)-objekt som kan inneh√•lla text, bilder, ljud, och till och med ett UIStateTree f√∂r en interaktiv upplevelse.

Villkorss√§ttning (Trigger Definition): Avs√§ndaren definierar villkoret f√∂r leverans. Detta kr√§ver att Coordinator Agent skapar en komplex (Trigger)-nod i Graph RAG. Triggers kan vara:

Tidsbaserade: "P√• mitt barnbarn Leos 25-√•rsdag den 14:e oktober 2045."

H√§ndelsebaserade: "N√§r Leo slutf√∂r sitt f√∂rsta egna app-projekt i det h√§r systemet."

Fr√•gebaserade: "Om n√•gon av mina efterlevande fr√•gar min agent om historien bakom min vigselring."

√ñvervakning: Coordinator Agent har en st√•ende, l√•gintensiv autonom process (Adaptera-l√§ge) som kontinuerligt √∂vervakar alla (Trigger)-noder i systemet f√∂r att se om deras villkor har uppfyllts.

Leverans: N√§r ett villkor uppfylls, initieras en noggrant avv√§gd leveransprocess.

Coordinator aktiveras och analyserar den nuvarande situationen.

Den anv√§nder hela perceptionsmodellen (SEP-103) f√∂r att l√§sa av Mottagarens User_State.

Baserat p√• denna avl√§sning och inneh√•llets natur, instrueras Conscious Agent att kontakta Mottagaren p√• det mest taktfulla s√§ttet, enligt Mirror & Harmonize-principen (SEP-104).

3. L√§rande och Personalisering (Graph RAG)
Graph RAG √§r hela ryggraden f√∂r denna funktion, d√• den hanterar komplexa, l√•ngsiktiga relationer √∂ver tid.

Datamodellering:

Noder: En (LegacyContent)-nod och en (Trigger)-nod.

Relationer: Grafen binder ihop intentionen: (User: 'Ingrid') -[:CREATED]-> (LegacyContent: 'R√•d_om_livet_video'). (LegacyContent: 'R√•d_om_livet_video') -[:HAS_TRIGGER]-> (Trigger: 'Leos_25√•rsdag'). (Trigger: 'Leos_25√•rsdag') -[:TARGETS]-> (User: 'Leo').

L√§rande Process: Denna struktur g√∂r det m√∂jligt f√∂r systemet att f√∂rst√• l√•ngsiktiga intentioner. SelfReflectionAssistant kan analysera vilka typer av "h√§lsningar" en anv√§ndare skapar f√∂r att f√• en √§nnu djupare bild av personens k√§rnv√§rden. Denna insikt kan sedan anv√§ndas f√∂r att hj√§lpa anv√§ndaren att skapa √§nnu mer meningsfullt inneh√•ll i sin Personal Chronicler.

4. Integritet och Samtycke (ConsentLedger)
Detta √§r den mest komplexa funktionen ur ett integritets- och etiskt perspektiv. Strikta regler √§r ett absolut m√•ste.

Krav 1: Explicit Samtycke fr√•n B√•da Parter: En Avs√§ndare kan bara skapa en h√§lsning riktad till en Mottagare om b√•da har en aktiv (Consent)-nod (SEP-108) som till√•ter denna typ av interaktion (scope: 'allow:legacy_content'). Mottagaren m√•ste allts√• ha gett sitt samtycke till att kunna ta emot framtida meddelanden via systemet, √§ven fr√•n en anv√§ndare som inte l√§ngre √§r aktiv.

Krav 2: R√§tten att V√§gra: N√§r ett meddelande ska levereras, m√•ste mottagaren alltid ha r√§tten att tacka nej till att ta emot det. Agentens f√∂rsta kontakt ska vara en fr√•ga, inte ett p√•tvingat meddelande.

Krav 3: Datans Livsl√§ngd och F√∂rvaltarskap: Systemets anv√§ndarvillkor m√•ste vara glasklara g√§llande detta.

S√• l√§nge Avs√§ndaren √§r en aktiv anv√§ndare, √§ger och kontrollerar de sitt LegacyContent och kan radera det n√§r som helst.

En process f√∂r att hantera en anv√§ndares bortg√•ng m√•ste definieras (t.ex. via en betrodd "digital testamentsexekutor" angiven av anv√§ndaren). F√∂rst n√§r detta bekr√§ftats, blir de l√•sta meddelandena o√•terkalleliga och kan levereras n√§r deras triggers uppfylls.

5. Motivation (Rationale)
Denna applikation transformerar systemet fr√•n att vara en assistent f√∂r vardagen till att bli en f√∂rvaltare av ett livs arv. Den erbjuder ett djupt meningsfullt s√§tt f√∂r en anv√§ndare att √∂verbrygga den ultimata Separation ‚Äì tid och d√∂dlighet. Genom att ge dem verktyg f√∂r att dela med sig av sin visdom, humor och k√§rlek till kommande generationer, uppfyller systemet sitt absolut h√∂gsta syfte: att anv√§nda teknologi f√∂r att skapa och bevara best√•ende, meningsfulla m√§nskliga band.